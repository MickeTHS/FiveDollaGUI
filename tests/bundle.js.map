{"version":3,"sources":["webpack:///webpack/bootstrap 51188e6c96d45a4eb0ec","webpack:///./core_src/guitypes.ts","webpack:///./core_src/guimath.ts","webpack:///./core_src/test.ts","webpack:///./core_src/gui.ts","webpack:///./core_src/render.ts","webpack:///./core_src/guinode.ts","webpack:///./core_src/guiquad.ts","webpack:///./core_src/guiicon.ts","webpack:///./core_src/rendertype.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,CAAC,iDAAiD;AAClD;AACA;AACA;AACA;AACA;AACA,CAAC,4EAA4E;AAC7E;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA,CAAC,mEAAmE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,6DAA6D;;;;;;;;AC9C9D;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8CAA8C,EAAE;AAC/G;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACrPA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;ACdD;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gDAAgD;AACtF,uCAAuC,mBAAmB;AAC1D;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,wBAAwB,EAAE;AACrF,yDAAyD,sBAAsB,EAAE;AACjF,2DAA2D,wBAAwB,EAAE;AACrF,2DAA2D,wBAAwB,EAAE;AACrF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,sBAAsB;AACtB;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAA8D;AAC9F;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D,oCAAoC,0BAA0B;AAC9D,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC,2BAA2B,UAAU;AACrC;AACA,0EAA0E,iDAAiD;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C,0CAA0C,2BAA2B;AACrE,gCAAgC,YAAY;AAC5C,sCAAsC,uBAAuB;AAC7D,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C,0CAA0C,2BAA2B;AACrE,gCAAgC,YAAY;AAC5C,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C,0CAA0C,2BAA2B;AACrE,gCAAgC,YAAY;AAC5C,sCAAsC,0BAA0B;AAChE,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C,0CAA0C,2BAA2B;AACrE,gCAAgC,YAAY;AAC5C,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C,0CAA0C,8BAA8B;AACxE,gCAAgC,cAAc;AAC9C,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA;AACA,uBAAuB,sCAAsC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2CAA2C;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sCAAsC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,8BAA8B,aAAa;AAC3C;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;ACjxBA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D,2CAA2C,gBAAgB;AAC3D,8CAA8C,mBAAmB;AACjE,+CAA+C,yBAAyB;AACxE,8CAA8C,wBAAwB;AACtE,8CAA8C,mBAAmB;AACjE;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;ACnVA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,2BAA2B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,uBAAuB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yCAAyC,iBAAiB;AAC1D,yDAAyD,yBAAyB;AAClF,mDAAmD,2BAA2B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;AAC9D,gDAAgD,wBAAwB;AACxE,kDAAkD,SAAS,kDAAkD;AAC7G;AACA;AACA;AACA,mDAAmD,2BAA2B;AAC9E,kDAAkD,0BAA0B;AAC5E,wCAAwC,mCAAmC;AAC3E,wCAAwC,mCAAmC;AAC3E,0CAA0C,SAAS,4BAA4B;AAC/E,yDAAyD,4BAA4B;AACrF,+CAA+C,uBAAuB;AACtE,oDAAoD,4BAA4B;AAChF,8CAA8C,sBAAsB;AACpE,4CAA4C,mCAAmC;AAC/E,6CAA6C,mCAAmC;AAChF,6CAA6C,qBAAqB;AAClE,2CAA2C,mBAAmB;AAC9D,6CAA6C,cAAc;AAC3D,mDAAmD,uBAAuB;AAC1E,4CAA4C,oBAAoB;AAChE,gDAAgD,wBAAwB;AACxE,uDAAuD,cAAc,cAAc;AACnF,sDAAsD,8BAA8B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD,mCAAmC,yDAAyD;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;AC5aA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,8BAA8B,aAAa;AAC3C,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACtHA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D,2CAA2C,mBAAmB;AAC9D,0CAA0C,kBAAkB;AAC5D,2CAA2C,mBAAmB;AAC9D;AACA,CAAC;AACD;AACA;;;;;;;;ACnDA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,0CAA0C,sBAAsB;AAChE,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D,8CAA8C,mBAAmB;AACjE,+CAA+C,oBAAoB;AACnE,0DAA0D,+BAA+B;AACzF,sDAAsD,2BAA2B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD","file":"./tests/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 51188e6c96d45a4eb0ec","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Anchor;\r\n(function (Anchor) {\r\n    Anchor[Anchor[\"ANCHOR_TOPLEFT\"] = 1] = \"ANCHOR_TOPLEFT\";\r\n    Anchor[Anchor[\"ANCHOR_CENTER\"] = 2] = \"ANCHOR_CENTER\";\r\n})(Anchor = exports.Anchor || (exports.Anchor = {}));\r\nvar BackgroundImage;\r\n(function (BackgroundImage) {\r\n    BackgroundImage[BackgroundImage[\"BACKGROUND_IMAGE_STRETCH\"] = 1] = \"BACKGROUND_IMAGE_STRETCH\";\r\n    BackgroundImage[BackgroundImage[\"BACKGROUND_IMAGE_REPEAT\"] = 2] = \"BACKGROUND_IMAGE_REPEAT\";\r\n    BackgroundImage[BackgroundImage[\"BACKGROUND_IMAGE_CENTER\"] = 3] = \"BACKGROUND_IMAGE_CENTER\";\r\n})(BackgroundImage = exports.BackgroundImage || (exports.BackgroundImage = {}));\r\nvar MouseButton;\r\n(function (MouseButton) {\r\n    MouseButton[MouseButton[\"MOUSEBUTTON_LEFT\"] = 0] = \"MOUSEBUTTON_LEFT\";\r\n    MouseButton[MouseButton[\"MOUSEBUTTON_MIDDLE\"] = 1] = \"MOUSEBUTTON_MIDDLE\";\r\n    MouseButton[MouseButton[\"MOUSEBUTTON_RIGHT\"] = 2] = \"MOUSEBUTTON_RIGHT\";\r\n})(MouseButton = exports.MouseButton || (exports.MouseButton = {}));\r\nvar State;\r\n(function (State) {\r\n    State[State[\"STATE_NO_CHANGE\"] = 0] = \"STATE_NO_CHANGE\";\r\n    State[State[\"STATE_CHANGE_TO_FRONT\"] = 1] = \"STATE_CHANGE_TO_FRONT\";\r\n    State[State[\"STATE_CHANGE_TO_BACK\"] = 2] = \"STATE_CHANGE_TO_BACK\";\r\n    State[State[\"STATE_ICON_ADDED\"] = 3] = \"STATE_ICON_ADDED\";\r\n    State[State[\"STATE_COLOR_CHANGE\"] = 4] = \"STATE_COLOR_CHANGE\";\r\n})(State = exports.State || (exports.State = {}));\r\nvar IconStyle;\r\n(function (IconStyle) {\r\n    IconStyle[IconStyle[\"ICON_STYLE_NORMAL\"] = 1] = \"ICON_STYLE_NORMAL\";\r\n    IconStyle[IconStyle[\"ICON_STYLE_STRETCHED\"] = 2] = \"ICON_STYLE_STRETCHED\";\r\n})(IconStyle = exports.IconStyle || (exports.IconStyle = {}));\r\nvar NodeOverlaps;\r\n(function (NodeOverlaps) {\r\n    NodeOverlaps[NodeOverlaps[\"NODE_NOT_INSIDE\"] = 0] = \"NODE_NOT_INSIDE\";\r\n    NodeOverlaps[NodeOverlaps[\"NODE_PARTIALLY_INSIDE\"] = 1] = \"NODE_PARTIALLY_INSIDE\";\r\n    NodeOverlaps[NodeOverlaps[\"NODE_FULLY_INSIDE\"] = 2] = \"NODE_FULLY_INSIDE\";\r\n})(NodeOverlaps = exports.NodeOverlaps || (exports.NodeOverlaps = {}));\r\nvar RenderType;\r\n(function (RenderType) {\r\n    RenderType[RenderType[\"RT_SQUARE\"] = 0] = \"RT_SQUARE\";\r\n    RenderType[RenderType[\"RT_POLYGON\"] = 1] = \"RT_POLYGON\";\r\n    RenderType[RenderType[\"RT_BORDER_SQUARE\"] = 2] = \"RT_BORDER_SQUARE\";\r\n    RenderType[RenderType[\"RT_BORDER_POLY\"] = 3] = \"RT_BORDER_POLY\";\r\n    RenderType[RenderType[\"RT_TEXT\"] = 4] = \"RT_TEXT\";\r\n    RenderType[RenderType[\"RT_ICON\"] = 5] = \"RT_ICON\";\r\n})(RenderType = exports.RenderType || (exports.RenderType = {}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/guitypes.ts\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction Math_radians(degrees) {\r\n    return degrees * Math.PI / 180;\r\n}\r\n;\r\nfunction Math_degrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n}\r\n;\r\nvar Point = (function () {\r\n    function Point() {\r\n    }\r\n    return Point;\r\n}());\r\nexports.Point = Point;\r\n;\r\nvar Rect = (function () {\r\n    function Rect() {\r\n    }\r\n    return Rect;\r\n}());\r\nexports.Rect = Rect;\r\n;\r\nvar FDGMath = (function () {\r\n    function FDGMath() {\r\n    }\r\n    FDGMath.invert_points = function (points) {\r\n        var tmp = [];\r\n        for (var i = points.length - 1; i >= 0; --i) {\r\n            tmp.push(points[i]);\r\n        }\r\n        for (var i = 0; i < tmp.length; ++i) {\r\n            points[i] = tmp[i];\r\n        }\r\n    };\r\n    FDGMath.line_intersection = function (Ax, Ay, Bx, By, Cx, Cy, Dx, Dy, point) {\r\n        var distAB, theCos, theSin, newX, ABpos;\r\n        if (Ax == Bx && Ay == By || Cx == Dx && Cy == Dy) {\r\n            return false;\r\n        }\r\n        Bx -= Ax;\r\n        By -= Ay;\r\n        Cx -= Ax;\r\n        Cy -= Ay;\r\n        Dx -= Ax;\r\n        Dy -= Ay;\r\n        distAB = Math.sqrt(Bx * Bx + By * By);\r\n        theCos = Bx / distAB;\r\n        theSin = By / distAB;\r\n        newX = Cx * theCos + Cy * theSin;\r\n        Cy = Cy * theCos - Cx * theSin;\r\n        Cx = newX;\r\n        newX = Dx * theCos + Dy * theSin;\r\n        Dy = Dy * theCos - Dx * theSin;\r\n        Dx = newX;\r\n        if (Cy == Dy) {\r\n            return false;\r\n        }\r\n        ABpos = Dx + (Cx - Dx) * Dy / (Dy - Cy);\r\n        point.x = Ax + ABpos * theCos;\r\n        point.y = Ay + ABpos * theSin;\r\n        return true;\r\n    };\r\n    FDGMath.inset_corner = function (a, b, c, d, e, f, point, insetDist) {\r\n        var c1 = c, d1 = d, c2 = c, d2 = d, dx1, dy1, dist1, dx2, dy2, dist2, insetX, insetY;\r\n        dx1 = c - a;\r\n        dy1 = d - b;\r\n        dist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\r\n        dx2 = e - c;\r\n        dy2 = f - d;\r\n        dist2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\r\n        if (dist1 == 0. || dist2 == 0.)\r\n            return;\r\n        insetX = dy1 / dist1 * insetDist;\r\n        a += insetX;\r\n        c1 += insetX;\r\n        insetY = -dx1 / dist1 * insetDist;\r\n        b += insetY;\r\n        d1 += insetY;\r\n        insetX = dy2 / dist2 * insetDist;\r\n        e += insetX;\r\n        c2 += insetX;\r\n        insetY = -dx2 / dist2 * insetDist;\r\n        f += insetY;\r\n        d2 += insetY;\r\n        if (c1 == c2 && d1 == d2) {\r\n            point.x = c1;\r\n            point.y = d1;\r\n            return;\r\n        }\r\n        var pp = { x: 0, y: 0 };\r\n        if (FDGMath.line_intersection(a, b, c1, d1, c2, d2, e, f, pp)) {\r\n            point.x = pp.x;\r\n            point.y = pp.y;\r\n        }\r\n    };\r\n    FDGMath.inset_polygon = function (points, insetDist) {\r\n        var startX = points[0].x, startY = points[0].y, a, b, c, d, e, f;\r\n        var i;\r\n        var corners = points.length;\r\n        if (corners < 3)\r\n            return false;\r\n        c = points[corners - 1].x;\r\n        d = points[corners - 1].y;\r\n        e = points[0].x;\r\n        f = points[0].y;\r\n        for (i = 0; i < corners - 1; i++) {\r\n            a = c;\r\n            b = d;\r\n            c = e;\r\n            d = f;\r\n            e = points[i + 1].x;\r\n            f = points[i + 1].y;\r\n            FDGMath.inset_corner(a, b, c, d, e, f, points[i], insetDist);\r\n        }\r\n        FDGMath.inset_corner(c, d, e, f, startX, startY, points[i], insetDist);\r\n        return true;\r\n    };\r\n    FDGMath.find_angle = function (p0, p1, c) {\r\n        var p0c = Math.sqrt(Math.pow(c.x - p0.x, 2) +\r\n            Math.pow(c.y - p0.y, 2));\r\n        var p1c = Math.sqrt(Math.pow(c.x - p1.x, 2) +\r\n            Math.pow(c.y - p1.y, 2));\r\n        var p0p1 = Math.sqrt(Math.pow(p1.x - p0.x, 2) +\r\n            Math.pow(p1.y - p0.y, 2));\r\n        return Math.acos((p1c * p1c + p0c * p0c - p0p1 * p0p1) / (2 * p1c * p0c));\r\n    };\r\n    FDGMath.shrink_corner = function (p0, p1, c, dist) {\r\n        var deg = FDGMath.find_angle(p0, p1, c) / 2.0;\r\n        var x = 0;\r\n        var y = 0;\r\n        if (p0.x <= c.x && p1.x >= c.x && p0.y >= c.y && p1.y >= c.y) {\r\n            console.log('case 1');\r\n            if (p0.x - c.x > p1.x - c.x) {\r\n                x = dist * Math.sin(deg - Math_radians(90));\r\n            }\r\n            else {\r\n                x = dist * Math.sin(deg - Math_radians(90)) * -1.0;\r\n            }\r\n            y = dist * Math.cos(deg) * -1.0;\r\n            console.log('x: ' + x + ', y: ' + y);\r\n        }\r\n        if (p0.x >= p1.x && p0.y >= p1.y) {\r\n            x = dist * Math.cos(deg);\r\n            y = dist * Math.sin(deg) * -1.0;\r\n        }\r\n        else if (p0.x <= p1.x && p0.y <= p1.y) {\r\n            x = dist * Math.sin(deg) * -1.0;\r\n            y = dist * Math.cos(deg);\r\n        }\r\n        else if (p0.x <= p1.x && p0.y >= p1.y) {\r\n            x = dist * Math.cos(deg);\r\n            y = dist * Math.sin(deg);\r\n        }\r\n        else if (p0.x >= p1.x && p0.y <= p1.y) {\r\n            x = dist * Math.sin(deg) * -1.0;\r\n            y = dist * Math.cos(deg) * -1.0;\r\n        }\r\n        else {\r\n            console.log('ERROR IN SHRINK CORNER');\r\n        }\r\n        return { x: c.x + x, y: c.y + y };\r\n    };\r\n    FDGMath.p_poly = function (vertices, testx, testy) {\r\n        var nvert = vertices.length;\r\n        var i, j, c = false;\r\n        for (i = 0, j = nvert - 1; i < nvert; j = i++) {\r\n            if (((vertices[i].y > testy) != (vertices[j].y > testy)) &&\r\n                (testx < (vertices[j].x - vertices[i].x) * (testy - vertices[i].y) / (vertices[j].y - vertices[i].y) + vertices[i].x))\r\n                c = !c;\r\n        }\r\n        return c;\r\n    };\r\n    FDGMath.a_rect_contains_b = function (rect_a, rect_b) {\r\n        if ((rect_b.x + rect_b.w) < (rect_a.x + rect_a.w)\r\n            && (rect_b.x) > (rect_a.x)\r\n            && (rect_b.y) < (rect_a.y)\r\n            && (rect_b.y + rect_b.h) < (rect_a.y + rect_a.h)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    FDGMath.a_rect_overlaps_b = function (rect_a, rect_b) {\r\n        if (rect_a.x < rect_b.x + rect_b.w &&\r\n            rect_a.x + rect_a.w > rect_b.x &&\r\n            rect_a.y < rect_b.y + rect_b.h &&\r\n            rect_a.h + rect_a.y > rect_b.y) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    FDGMath.random_hex_color = function () {\r\n        var randomColor = \"#000000\".replace(/0/g, function () { return (~~(Math.random() * 16)).toString(16); });\r\n        return randomColor;\r\n    };\r\n    FDGMath.rect_center_to_topleft = function (rect) {\r\n        return { x: rect.x - rect.w / 2, y: rect.y - rect.h / 2, w: rect.w, h: rect.h };\r\n    };\r\n    FDGMath.rect_topleft_to_center = function (rect) {\r\n        return { x: rect.x + rect.w / 2, y: rect.y + rect.h / 2, w: rect.w, h: rect.h };\r\n    };\r\n    FDGMath.min_arr = function (array, prop_name) {\r\n        var min = Number.POSITIVE_INFINITY;\r\n        for (var i = 0; i < array.length; ++i) {\r\n            if (array[i][prop_name] < min) {\r\n                min = array[i][prop_name];\r\n            }\r\n        }\r\n        return min;\r\n    };\r\n    FDGMath.max_arr = function (array, prop_name) {\r\n        var max = Number.NEGATIVE_INFINITY;\r\n        for (var i = 0; i < array.length; ++i) {\r\n            if (array[i][prop_name] > max) {\r\n                max = array[i][prop_name];\r\n            }\r\n        }\r\n        return max;\r\n    };\r\n    FDGMath.calc_br = function (points) {\r\n        var min_x = FDGMath.min_arr(points, 'x');\r\n        var max_x = FDGMath.max_arr(points, 'x');\r\n        var min_y = FDGMath.min_arr(points, 'y');\r\n        var max_y = FDGMath.max_arr(points, 'y');\r\n        var br = { x: min_x, y: min_y, w: max_x - min_x, h: max_y - min_y };\r\n        return br;\r\n    };\r\n    FDGMath.point_in_rect = function (x, y, rect) {\r\n        if (rect.x > x || rect.x + rect.w < x || rect.y > y || rect.y + rect.h < y) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    FDGMath.sign = function (x0, y0, x1, y1, x2, y2) {\r\n        return (x0 - x2) * (y1 - y2) - (x1 - x2) * (y0 - y2);\r\n    };\r\n    FDGMath.point_in_triangle = function (x, y, x0, y0, x1, y1, x2, y2) {\r\n        var b1 = FDGMath.sign(x, y, x0, y0, x1, y1) < 0.0;\r\n        var b2 = FDGMath.sign(x, y, x1, y1, x2, y2) < 0.0;\r\n        var b3 = FDGMath.sign(x, y, x2, y2, x0, y0) < 0.0;\r\n        return ((b1 == b2) && (b2 == b3));\r\n    };\r\n    return FDGMath;\r\n}());\r\nexports.FDGMath = FDGMath;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/guimath.ts\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar gui_1 = require(\"./gui\");\r\nconsole.log('starting app');\r\nvar _gui = new gui_1.GUI('main');\r\n_gui.on('node_selected', function (node) {\r\n});\r\n_gui.on('node_highlight', function (node) {\r\n});\r\n_gui.on('mousedown', function (x, y, button) {\r\n});\r\n_gui.on('mouseup', function (x, y, button) {\r\n});\r\n_gui.on('mousemove', function (x, y, button) {\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/test.ts\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar guimath_1 = require(\"./guimath\");\r\nvar guitypes_1 = require(\"./guitypes\");\r\nvar guitypes_2 = require(\"./guitypes\");\r\nvar guitypes_3 = require(\"./guitypes\");\r\nvar guitypes_4 = require(\"./guitypes\");\r\nvar guitypes_5 = require(\"./guitypes\");\r\nvar render_1 = require(\"./render\");\r\nvar guinode_1 = require(\"./guinode\");\r\nvar guiquad_1 = require(\"./guiquad\");\r\nvar guiicon_1 = require(\"./guiicon\");\r\nvar rendertype_1 = require(\"./rendertype\");\r\nvar guitypes_6 = require(\"./guitypes\");\r\nvar _draw_calls_per_frame = 0;\r\nvar _draw_calls = 0;\r\nvar _global_gui_id = 0;\r\nvar _gui_containers = [];\r\nfunction is_event_supported(eventName) {\r\n    var el = document.createElement('div');\r\n    eventName = 'on' + eventName;\r\n    var isSupported = (eventName in el);\r\n    if (!isSupported) {\r\n        el.setAttribute(eventName, 'return;');\r\n        isSupported = typeof el[eventName] == 'function';\r\n    }\r\n    el = null;\r\n    return isSupported;\r\n}\r\nvar draw_frame = function () {\r\n    for (var i = 0; i < _gui_containers.length; ++i) {\r\n        var g = _gui_containers[i];\r\n        g.draw('default', true);\r\n    }\r\n    window.requestAnimationFrame(draw_frame);\r\n};\r\ndraw_frame();\r\nvar GUI = (function () {\r\n    function GUI(canvas_id, anchor_point, quad_division) {\r\n        if (anchor_point === void 0) { anchor_point = guitypes_1.Anchor.ANCHOR_CENTER; }\r\n        if (quad_division === void 0) { quad_division = 2; }\r\n        console.log('GUI Constructor for ' + canvas_id);\r\n        _gui_containers.push(this);\r\n        this._select_boxing = { running: false, rect: null };\r\n        this._draw_history = [];\r\n        this._anchor_point = anchor_point;\r\n        this._canvas_elem = document.getElementById(canvas_id);\r\n        this._width = this._canvas_elem.offsetWidth;\r\n        this._height = this._canvas_elem.offsetHeight;\r\n        var canvas = this._canvas_elem;\r\n        this._renderer = new render_1.Render_screen(canvas_id, this._width, this._height);\r\n        this._renderer.set_font(12, 'Verdana');\r\n        this._zoom_enabled = false;\r\n        this._pan_enabled = false;\r\n        this._select_box_enabled = false;\r\n        this._events = {};\r\n        this._events['click'] = [];\r\n        this._events['node_selected'] = [];\r\n        this._events['node_highlight'] = [];\r\n        this._events['node_deselected'] = [];\r\n        this._events['mousemove'] = [];\r\n        this._events['mousedown'] = [];\r\n        this._events['mouseup'] = [];\r\n        var _this = this;\r\n        canvas.addEventListener('mousedown', function (e) { _this.on_mouse_down(e); }, false);\r\n        canvas.addEventListener('mouseup', function (e) { _this.on_mouse_up(e); }, false);\r\n        canvas.addEventListener('mousemove', function (e) { _this.on_mouse_move(e); }, false);\r\n        canvas.addEventListener('mouseover', function (e) { _this.on_mouse_over(e); }, false);\r\n        this._draw_counter = 0;\r\n        this._canvas_elem.addEventListener('mousewheel', function (e) {\r\n            var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\r\n            this.wheel(delta);\r\n        }.bind(this), false);\r\n        this._dragging = false;\r\n        this._drag_node = null;\r\n        this._high_node = null;\r\n        this._nodes = [];\r\n        this._lines = {};\r\n        this._layer = 'default';\r\n        this._locked = false;\r\n        this._mouse_inside = false;\r\n        this._zoom_factor = 1.0;\r\n        this._center = { x: this._width / 2, y: this._height / 2 };\r\n        this._quads = {};\r\n        this._quad_division = quad_division;\r\n        this._selected_nodes = {};\r\n        this._prev_center = { x: 0, y: 0 };\r\n        this._force_draw = false;\r\n        this._bg_image = null;\r\n        this._bg_sizing = 0;\r\n        this._rect = { x: 0, y: 0, w: this._width, h: this._height };\r\n        var r = this._canvas_elem.getBoundingClientRect();\r\n        this._pos_rect = { x: r.left, y: r.top, w: this._width, h: this._height };\r\n        this._render_types = new rendertype_1.Render_type_handler(this._renderer);\r\n        this.generate_quads(quad_division);\r\n        this.add_layer(this._layer);\r\n    }\r\n    GUI.prototype.on_mouse_over = function (event) {\r\n        this._mouse_inside = true;\r\n    };\r\n    GUI.prototype.on_mouse_out = function (event) {\r\n        console.log('MOUSE OUT');\r\n        var x = event.clientX;\r\n        var y = event.clientY;\r\n        this._mouse_inside = false;\r\n        var rect = this._canvas_elem.getBoundingClientRect();\r\n        var myrect = { x: rect.left, y: rect.top, w: rect.width, h: rect.height };\r\n        this.mouseout(x - myrect.x, y - myrect.y);\r\n    };\r\n    GUI.prototype.on_mouse_move = function (event) {\r\n        console.log('mouse moved');\r\n        var rect = this._canvas_elem.getBoundingClientRect();\r\n        var x = event.clientX - rect.left;\r\n        var y = event.clientY - rect.top;\r\n        this.mousemove(x, y);\r\n    };\r\n    GUI.prototype.on_mouse_down = function (event) {\r\n        var rect = this._canvas_elem.getBoundingClientRect();\r\n        var x = event.clientX - rect.left;\r\n        var y = event.clientY - rect.top;\r\n        console.log('MOUSE DOWN: ' + x + ' y: ' + y);\r\n        this.mousedown(x, y, event.button);\r\n    };\r\n    GUI.prototype.on_mouse_up = function (event) {\r\n        console.log('MOUSE UP');\r\n        var rect = this._canvas_elem.getBoundingClientRect();\r\n        var x = event.clientX - rect.left;\r\n        var y = event.clientY - rect.top;\r\n        this.mouseup(x, y, event.button);\r\n    };\r\n    GUI.prototype.on_mouse_wheel = function (e, canvas) {\r\n        if (canvas == this._canvas_elem) {\r\n            var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\r\n            this.wheel(delta);\r\n        }\r\n    };\r\n    GUI.prototype.num_drawcalls = function () {\r\n        var sum = 0;\r\n        for (var i = 0; i < this._draw_history.length; ++i) {\r\n            sum += this._draw_history[i];\r\n        }\r\n        return sum / this._draw_history.length;\r\n    };\r\n    GUI.prototype.init = function () {\r\n    };\r\n    GUI.prototype.set_static_background_image = function (img_src, scale) {\r\n        var loadingimage = new Image();\r\n        var that = this;\r\n        var canvas = document.getElementById('bg');\r\n        var context = canvas.getContext('2d');\r\n        loadingimage.src = img_src;\r\n        loadingimage.addEventListener('load', function () {\r\n            var fw = loadingimage.width * scale;\r\n            var fh = loadingimage.height * scale;\r\n            var cw = that._width;\r\n            var ch = that._height;\r\n            if (fw > cw) {\r\n                console.error('image wont fit, stretching');\r\n            }\r\n            if (fh > ch) {\r\n                console.error('image wont fit, stretching');\r\n            }\r\n            var empty_w = cw - fw;\r\n            var empty_h = ch - fh;\r\n            context.drawImage(loadingimage, 0, 0, loadingimage.width, loadingimage.height, empty_w / 2, empty_h / 2, cw - empty_w, ch - empty_h);\r\n            that = null;\r\n            loadingimage = null;\r\n        });\r\n    };\r\n    GUI.prototype.load_atlas = function (img_src, name, callback) {\r\n        var loadingimage = new Image();\r\n        var that = this;\r\n        loadingimage.addEventListener('load', function () {\r\n            var rect = { x: 0, y: 0, w: loadingimage.width, h: loadingimage.height };\r\n            var atlas = new guiicon_1.GUI_atlas(loadingimage, '');\r\n            callback(atlas);\r\n            callback = null;\r\n            atlas = null;\r\n            that = null;\r\n            rect = null;\r\n        });\r\n        loadingimage.src = img_src;\r\n    };\r\n    GUI.prototype.get_quad = function (key) {\r\n        return this._quads[key];\r\n    };\r\n    GUI.prototype.set_bg_image_obj = function (image) {\r\n        this._bg_image = image;\r\n    };\r\n    GUI.prototype.set_bg_image = function (img_src, sizing) {\r\n        if (sizing === void 0) { sizing = guitypes_2.BackgroundImage.BACKGROUND_IMAGE_STRETCH; }\r\n        var loadingimage = new Image();\r\n        var that = this;\r\n        this._bg_sizing = sizing;\r\n        loadingimage.addEventListener('load', function () {\r\n            that.set_bg_image_obj(loadingimage);\r\n            var rect = { x: 0, y: 0, w: that._bg_image.width, h: that._bg_image.height };\r\n            if (that._bg_sizing == guitypes_2.BackgroundImage.BACKGROUND_IMAGE_STRETCH) {\r\n                var x_div = rect.w / that._quad_division;\r\n                var y_div = rect.h / that._quad_division;\r\n                for (var gy = 0; gy < that._quad_division; ++gy) {\r\n                    for (var gx = 0; gx < that._quad_division; ++gx) {\r\n                        var r = { x: x_div * gx, y: y_div * gy, w: x_div, h: y_div };\r\n                        that._quads[gx + ':' + gy].set_bg_image(loadingimage, r);\r\n                    }\r\n                }\r\n            }\r\n            that = null;\r\n            loadingimage = null;\r\n        });\r\n        loadingimage.src = img_src;\r\n    };\r\n    GUI.prototype.on = function (event_str, callback) {\r\n        this._events[event_str].push(callback);\r\n    };\r\n    GUI.prototype.canvas = function () {\r\n        return this._canvas_elem;\r\n    };\r\n    GUI.prototype.generate_quads = function (cols) {\r\n        this._quad_division = cols;\r\n        var x_mul = this._width / cols;\r\n        var y_mul = this._height / cols;\r\n        for (var i = 0; i < cols; ++i) {\r\n            for (var j = 0; j < cols; ++j) {\r\n                var id = j + ':' + i;\r\n                this._quads[id] = new guiquad_1.GUI_quad(this._renderer, { x: j * x_mul, y: i * y_mul, w: x_mul, h: y_mul }, id);\r\n                this._quads[id].set_bg_color('#000');\r\n            }\r\n        }\r\n    };\r\n    GUI.prototype.calc_quads_for_node = function (gui_node) {\r\n        var quads = {};\r\n        for (var k in this._quads) {\r\n            var res = this._quads[k].calc_node_inside(gui_node);\r\n            if (res == guitypes_5.NodeOverlaps.NODE_FULLY_INSIDE) {\r\n                quads[k] = this._quads[k];\r\n                return quads;\r\n            }\r\n            else if (res == guitypes_5.NodeOverlaps.NODE_PARTIALLY_INSIDE) {\r\n                quads[k] = this._quads[k];\r\n            }\r\n        }\r\n        return quads;\r\n    };\r\n    GUI.prototype.create_stored_box = function (id, x, y, width, height, caption, background_color, border, border_color) {\r\n        if (caption === void 0) { caption = ''; }\r\n        if (background_color === void 0) { background_color = '#000'; }\r\n        if (border === void 0) { border = 1; }\r\n        if (border_color === void 0) { border_color = '#fff'; }\r\n        for (var i = 0; i < this._nodes.length; ++i) {\r\n            if (this._nodes[i].id() == id) {\r\n                return this._nodes[i];\r\n            }\r\n        }\r\n        var g = new guinode_1.GUI_node(this._renderer, id, this._anchor_point, 'square');\r\n        _global_gui_id = id + 1;\r\n        g.set_pos(x, y);\r\n        g.set_width(width);\r\n        g.set_height(height);\r\n        g.set_background_color(background_color);\r\n        g.set_border_color('#000');\r\n        g.set_caption(caption);\r\n        g.set_border_thickness(border);\r\n        g.recalculate();\r\n        g.set_prev_state(x, y, width, height);\r\n        this._nodes.push(g);\r\n        var rt = this._render_types.add_square(background_color);\r\n        rt.add_node(g);\r\n        var rt_b = this._render_types.add_border(border, '#000');\r\n        rt_b.add_node(g);\r\n        var q = this.calc_quads_for_node(g);\r\n        for (var k in q) {\r\n            q[k].add_node(g);\r\n        }\r\n        g.set_quad_ids(Object.keys(q));\r\n        return g;\r\n    };\r\n    GUI.prototype.create_box = function (x, y, width, height, caption, background_color, border, border_color) {\r\n        if (caption === void 0) { caption = ''; }\r\n        if (background_color === void 0) { background_color = '#000'; }\r\n        if (border === void 0) { border = 1; }\r\n        if (border_color === void 0) { border_color = '#fff'; }\r\n        var g = new guinode_1.GUI_node(this._renderer, _global_gui_id++, this._anchor_point, 'square');\r\n        g.set_pos(x, y);\r\n        g.set_width(width);\r\n        g.set_height(height);\r\n        g.set_background_color(background_color);\r\n        g.set_border_color('#000');\r\n        g.set_caption(caption);\r\n        g.set_border_thickness(border);\r\n        g.recalculate();\r\n        g.set_prev_state(x, y, width, height);\r\n        this._nodes.push(g);\r\n        var rt = this._render_types.add_square(background_color);\r\n        rt.add_node(g);\r\n        var rt_b = this._render_types.add_border(border, '#000');\r\n        rt_b.add_node(g);\r\n        if (caption != '') {\r\n            var rt_t = this._render_types.add_text('#ffffff');\r\n            rt_t.add_node(g);\r\n        }\r\n        var q = this.calc_quads_for_node(g);\r\n        for (var k in q) {\r\n            q[k].add_node(g);\r\n        }\r\n        if (Object.keys(q).length <= 0) {\r\n            console.error('No quads for node!');\r\n        }\r\n        g.set_quad_ids(Object.keys(q));\r\n        return g;\r\n    };\r\n    GUI.prototype.get_current_id = function () {\r\n        return _global_gui_id;\r\n    };\r\n    GUI.prototype.create_stored_polygon = function (id, x, y, points, caption, background_color, border, border_color) {\r\n        if (caption === void 0) { caption = ''; }\r\n        if (background_color === void 0) { background_color = '#000'; }\r\n        if (border === void 0) { border = 1; }\r\n        if (border_color === void 0) { border_color = '#000000'; }\r\n        for (var i = 0; i < this._nodes.length; ++i) {\r\n            if (this._nodes[i].id() == id) {\r\n                return this._nodes[i];\r\n            }\r\n        }\r\n        _global_gui_id = id + 1;\r\n        var g = new guinode_1.GUI_node(this._renderer, id, this._anchor_point, 'polygon');\r\n        var min_x = guimath_1.FDGMath.min_arr(points, 'x');\r\n        var max_x = guimath_1.FDGMath.max_arr(points, 'x');\r\n        var min_y = guimath_1.FDGMath.min_arr(points, 'y');\r\n        var max_y = guimath_1.FDGMath.max_arr(points, 'y');\r\n        var width = max_x - min_x;\r\n        var height = max_y - min_y;\r\n        g.set_pos(x, y);\r\n        g.set_width(width);\r\n        g.set_height(height);\r\n        g.set_points(points);\r\n        g.set_prev_point_state(g.abs_points());\r\n        g.set_background_color(background_color);\r\n        g.set_border_color(border_color);\r\n        g.set_caption(caption);\r\n        g.set_border_thickness(border);\r\n        var rt = this._render_types.add_polygon(background_color);\r\n        rt.add_node(g);\r\n        var rt_b = this._render_types.add_border_poly(border, border_color);\r\n        rt_b.add_node(g);\r\n        if (caption != '') {\r\n            var rt_t = this._render_types.add_text('#000000');\r\n            rt_t.add_node(g);\r\n        }\r\n        this._nodes.push(g);\r\n        var q = this.calc_quads_for_node(g);\r\n        for (var k in q) {\r\n            q[k].add_node(g);\r\n        }\r\n        g.set_quad_ids(Object.keys(q));\r\n        return g;\r\n    };\r\n    GUI.prototype.create_polygon = function (x, y, points, caption, background_color, border, border_color) {\r\n        if (caption === void 0) { caption = ''; }\r\n        if (background_color === void 0) { background_color = '#000'; }\r\n        if (border === void 0) { border = 1; }\r\n        if (border_color === void 0) { border_color = '#fff'; }\r\n        var g = new guinode_1.GUI_node(this._renderer, _global_gui_id++, this._anchor_point, 'polygon');\r\n        var min_x = guimath_1.FDGMath.min_arr(points, 'x');\r\n        var max_x = guimath_1.FDGMath.max_arr(points, 'x');\r\n        var min_y = guimath_1.FDGMath.min_arr(points, 'y');\r\n        var max_y = guimath_1.FDGMath.max_arr(points, 'y');\r\n        var width = max_x - min_x;\r\n        var height = max_y - min_y;\r\n        console.log('p width: ' + width + ' p height: ' + height);\r\n        g.set_pos(x, y);\r\n        g.set_width(width);\r\n        g.set_height(height);\r\n        g.set_points(points);\r\n        g.set_prev_point_state(g.abs_points());\r\n        g.set_background_color(background_color);\r\n        g.set_border_color(border_color);\r\n        g.set_caption(caption);\r\n        g.set_border_thickness(border);\r\n        var rt = this._render_types.add_polygon(background_color);\r\n        rt.add_node(g);\r\n        var rt_b = this._render_types.add_border_poly(border, border_color);\r\n        rt_b.add_node(g);\r\n        if (caption != '') {\r\n            var rt_t = this._render_types.add_text('#ffffff');\r\n            rt_t.add_node(g);\r\n        }\r\n        this._nodes.push(g);\r\n        var q = this.calc_quads_for_node(g);\r\n        for (var k in q) {\r\n            q[k].add_node(g);\r\n        }\r\n        g.set_quad_ids(Object.keys(q));\r\n        return g;\r\n    };\r\n    GUI.prototype.create_circle = function (x, y, radius, caption, background_color, border, border_color) {\r\n        if (caption === void 0) { caption = ''; }\r\n        if (background_color === void 0) { background_color = '#aaaaaa'; }\r\n        if (border === void 0) { border = 0.5; }\r\n        if (border_color === void 0) { border_color = '#000'; }\r\n        var g = new guinode_1.GUI_node(this._renderer, _global_gui_id++, this._anchor_point, 'circle');\r\n        g.set_pos(x, y);\r\n        g.set_radius(radius);\r\n        g.set_background_color(background_color);\r\n        g.set_border_color(border_color);\r\n        g.set_caption(caption);\r\n        g.set_border_thickness(border);\r\n        var q = this.calc_quads_for_node(g);\r\n        for (var k in q) {\r\n            q[k].add_node(g);\r\n        }\r\n        g.set_quad_ids(Object.keys(q));\r\n        return g;\r\n    };\r\n    GUI.prototype.get_quad_with_id = function (id) {\r\n        if (id in this._quads) {\r\n            return this._quads[id];\r\n        }\r\n        return null;\r\n    };\r\n    GUI.prototype.get_node_with_id = function (id) {\r\n        for (var k in this._quads) {\r\n            var n = this._quads[k].get_node_with_id(id);\r\n            if (n != null) {\r\n                return n;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    GUI.prototype.update_node_quads = function (gui_node) {\r\n        var calced_qs = this.calc_quads_for_node(gui_node);\r\n        for (var cck in calced_qs) {\r\n            calced_qs[cck].add_node(gui_node);\r\n        }\r\n        gui_node.set_quad_ids(Object.keys(calced_qs));\r\n    };\r\n    GUI.prototype.set_zoom = function (center_x, center_y, factor) {\r\n        this._zoom_factor = factor;\r\n        this._center = { x: center_x, y: center_y };\r\n        console.log('zoomed, pos: ' + center_x + ', ' + center_y + ' factor: ' + this._zoom_factor);\r\n        for (var k in this._quads) {\r\n            this._quads[k].clear_nodes();\r\n        }\r\n        for (var nk = 0; nk < this._nodes.length; ++nk) {\r\n            var node = this._nodes[nk];\r\n            if (node == null) {\r\n                console.log('null node, how?');\r\n                continue;\r\n            }\r\n            try {\r\n                if (node.shape() == 'polygon') {\r\n                    var points = node.points();\r\n                    var ppoints = node.prev_point_state();\r\n                    for (var i = 0; i < points.length; ++i) {\r\n                        points[i].x = Math.round((ppoints[i].x * factor));\r\n                        points[i].y = Math.round((ppoints[i].y * factor));\r\n                    }\r\n                    node.set_points(points);\r\n                }\r\n                else {\r\n                    var pos = node.pos();\r\n                    var help = node.prev_state();\r\n                    node.set_width(Math.round(help.w * factor));\r\n                    node.set_height(Math.round(help.h * factor));\r\n                    node.set_pos(Math.round((help.x * factor) - center_x), Math.round((help.y * factor) - center_y));\r\n                }\r\n                this.update_node_quads(node);\r\n            }\r\n            catch (ex) {\r\n                console.log('exception: ' + node.id() + ':' + ex);\r\n            }\r\n        }\r\n        for (var k in this._quads) {\r\n            this._quads[k].set_changed(true);\r\n        }\r\n        this._prev_center = this._center;\r\n        this._force_draw = true;\r\n    };\r\n    GUI.prototype.set_center = function (x, y) {\r\n        this._center = { x: x, y: y };\r\n        var delta_x = this._center.x - this._prev_center.x;\r\n        var delta_y = this._center.y - this._prev_center.y;\r\n        for (var nk = 0; nk < this._nodes.length; ++nk) {\r\n            var node = this._nodes[nk];\r\n            var pos = node.pos();\r\n            node.set_pos(Math.round(pos.x + delta_x), Math.round(pos.y + delta_y), true);\r\n        }\r\n        this._prev_center = this._center;\r\n        this._force_draw = true;\r\n        return this._center;\r\n    };\r\n    GUI.prototype.is_mouse_inside = function () {\r\n        return this._mouse_inside;\r\n    };\r\n    GUI.prototype.add_layer = function (layer) {\r\n    };\r\n    GUI.prototype.set_layer = function (layer) {\r\n        this._layer = layer;\r\n    };\r\n    GUI.prototype.layer = function () { return this._layer; };\r\n    GUI.prototype.locked = function () { return this._locked; };\r\n    GUI.prototype.lock = function () {\r\n        this._locked = true;\r\n    };\r\n    GUI.prototype.unlock = function () {\r\n        this._locked = false;\r\n    };\r\n    GUI.prototype.add_icon = function (element_id, name) {\r\n    };\r\n    GUI.prototype.icon = function (name) { return this._renderer.icon(name); };\r\n    GUI.prototype.nodes = function () {\r\n        return this._nodes;\r\n    };\r\n    GUI.prototype.renderer = function () {\r\n        return this._renderer;\r\n    };\r\n    GUI.prototype.connect = function (node1, node2) {\r\n    };\r\n    GUI.prototype.toggle_shadow = function (shadow) {\r\n        this._renderer.toggle_shadow(shadow);\r\n    };\r\n    GUI.prototype.shadow = function () {\r\n        return this._renderer.shadow();\r\n    };\r\n    GUI.prototype.size = function () {\r\n        return [this._width, this._height];\r\n    };\r\n    GUI.prototype.width = function () {\r\n        return this._width;\r\n    };\r\n    GUI.prototype.height = function () {\r\n        return this._height;\r\n    };\r\n    GUI.prototype.resize = function (width, height) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._renderer.resize(this._width, this._height);\r\n    };\r\n    GUI.prototype.get_quad_at_pos = function (x, y) {\r\n        var x_mul = Math.round(this._width / this._quad_division);\r\n        var y_mul = Math.round(this._height / this._quad_division);\r\n        var q_x = Math.floor(x / x_mul);\r\n        var q_y = Math.floor(y / y_mul);\r\n        return this._quads[q_x + ':' + q_y];\r\n    };\r\n    GUI.prototype.get_nodes_at_pos = function (x, y) {\r\n        var q = this.get_quad_at_pos(x, y);\r\n        if (q == null) {\r\n            return null;\r\n        }\r\n        var nodes = q.get_nodes_at_pos(x, y);\r\n        return nodes;\r\n    };\r\n    GUI.prototype.mark_changed_node = function (gui_node) {\r\n        var ids = gui_node.quad_ids();\r\n        for (var i = 0; i < ids.length; ++i) {\r\n            this._quads[ids[i]].set_changed(true);\r\n        }\r\n    };\r\n    GUI.prototype.remove_node = function (node) {\r\n        console.log('removing from all');\r\n        this._render_types.remove_node_from_all(node);\r\n        for (var i = 0; i < this._nodes.length; ++i) {\r\n            if (this._nodes[i] == node) {\r\n                this._nodes.splice(i, 1);\r\n            }\r\n        }\r\n    };\r\n    GUI.prototype.select_nodes_at_pos = function (x, y) {\r\n        var nodes = this.get_nodes_at_pos(x, y);\r\n        for (var k in this._selected_nodes) {\r\n            var node = this._selected_nodes[k];\r\n            if (!node.highlightable()) {\r\n                continue;\r\n            }\r\n            node.set_selected(false);\r\n            this.mark_changed_node(node);\r\n            var rt = null;\r\n            if (node.shape() == 'square') {\r\n                this._render_types.remove_node(node, guitypes_6.RenderType.RT_SQUARE);\r\n                rt = this._render_types.add_square(node.shaded_color());\r\n            }\r\n            else if (node.shape() == 'polygon') {\r\n                this._render_types.remove_node(node, guitypes_6.RenderType.RT_POLYGON);\r\n                rt = this._render_types.add_polygon(node.shaded_color());\r\n            }\r\n            rt.add_node(node);\r\n        }\r\n        this._selected_nodes = {};\r\n        for (var k in nodes) {\r\n            if (!nodes[k].highlightable()) {\r\n                continue;\r\n            }\r\n            this._selected_nodes[k] = nodes[k];\r\n            nodes[k].set_selected(true);\r\n            var rt = null;\r\n            if (nodes[k].shape() == 'square') {\r\n                this._render_types.remove_node(nodes[k], guitypes_6.RenderType.RT_SQUARE);\r\n                rt = this._render_types.add_square(nodes[k].shaded_color());\r\n            }\r\n            else if (nodes[k].shape() == 'polygon') {\r\n                this._render_types.remove_node(nodes[k], guitypes_6.RenderType.RT_POLYGON);\r\n                rt = this._render_types.add_polygon(nodes[k].shaded_color());\r\n            }\r\n            rt.add_node(nodes[k]);\r\n            nodes[k].set_mousepos(x, y);\r\n        }\r\n    };\r\n    GUI.prototype.state_change_node = function (guinode) {\r\n        var rt = null;\r\n        if (guinode.shape() == 'square') {\r\n            this._render_types.remove_node(guinode, guitypes_6.RenderType.RT_SQUARE);\r\n            rt = this._render_types.add_square(guinode.shaded_color());\r\n        }\r\n        else if (guinode.shape() == 'polygon') {\r\n            this._render_types.remove_node(guinode, guitypes_6.RenderType.RT_POLYGON);\r\n            rt = this._render_types.add_polygon(guinode.shaded_color());\r\n        }\r\n        rt.add_node(guinode);\r\n        guinode.pop_state();\r\n    };\r\n    GUI.prototype.wheel = function (delta) {\r\n        if (!this._zoom_enabled) {\r\n            return;\r\n        }\r\n        if (delta < 0) {\r\n            this.set_zoom(0, 0, 1.0);\r\n        }\r\n        else if (delta > 0) {\r\n            this.set_zoom(this.width(), this.height(), 4.0);\r\n        }\r\n    };\r\n    GUI.prototype.mousedown = function (x, y, button) {\r\n        if (!guimath_1.FDGMath.point_in_rect(x, y, this._rect)) {\r\n            return;\r\n        }\r\n        if (this._select_box_enabled && button == guitypes_3.MouseButton.MOUSEBUTTON_LEFT) {\r\n            this._select_boxing.running = true;\r\n            this._select_boxing.rect.x = x;\r\n            this._select_boxing.rect.y = y;\r\n        }\r\n        for (var i = 0; i < this._events['click'].length; ++i) {\r\n            this._events['click'][i](x, y, button, null);\r\n        }\r\n        for (var i = 0; i < this._events['mousedown'].length; ++i) {\r\n            this._events['mousedown'][i](x, y, button, null);\r\n        }\r\n        var q = this.get_quad_at_pos(x, y);\r\n        if (this.locked()) {\r\n            return;\r\n        }\r\n        if (this._high_node != null) {\r\n            this._high_node.set_highlighted(false);\r\n            this.mark_changed_node(this._high_node);\r\n        }\r\n        var nodes = this.get_nodes_at_pos(x, y);\r\n        if (Object.keys(nodes).length == 0) {\r\n            console.error('no nodes');\r\n            return;\r\n        }\r\n        this._dragging = true;\r\n        this._drag_node = nodes[Object.keys(nodes)[0]];\r\n        if (this._drag_node != null) {\r\n            this._drag_node.set_selected(true);\r\n            this.mark_changed_node(this._drag_node);\r\n            var rt = null;\r\n            if (this._drag_node.shape() == 'square') {\r\n                this._render_types.remove_node(this._drag_node, guitypes_6.RenderType.RT_SQUARE);\r\n                rt = this._render_types.add_square('#33ff33');\r\n            }\r\n            else if (this._drag_node.shape() == 'polygon') {\r\n                this._render_types.remove_node(this._drag_node, guitypes_6.RenderType.RT_POLYGON);\r\n                rt = this._render_types.add_polygon('#33ff33');\r\n            }\r\n            rt.add_node(this._drag_node);\r\n            for (var i = 0; i < this._events['node_selected'].length; ++i) {\r\n                this._events['node_selected'][i](x, y, button, this._drag_node);\r\n            }\r\n        }\r\n        this._high_node = nodes[Object.keys(nodes)[0]];\r\n        if (this._high_node != null) {\r\n            this._high_node.set_highlighted(true);\r\n            this.mark_changed_node(this._high_node);\r\n            for (var i = 0; i < this._events['node_highlight'].length; ++i) {\r\n                this._events['node_highlight'][i](x, y, button, this._high_node);\r\n            }\r\n        }\r\n    };\r\n    GUI.prototype.mouseup = function (x, y, button) {\r\n        console.log('RELEASE: ' + button);\r\n        if (button == guitypes_3.MouseButton.MOUSEBUTTON_LEFT) {\r\n            console.log('CLOSING SELECT BOX');\r\n            var brect = this._select_boxing.rect;\r\n            this._select_boxing.running = false;\r\n            close_selection_box();\r\n        }\r\n        if (this.locked()) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < this._events['mouseup'].length; ++i) {\r\n            this._events['mouseup'][i](x, y, button, null);\r\n        }\r\n        for (var i = 0; i < this._nodes.length; ++i) {\r\n            this.update_node_quads(this._nodes[i]);\r\n        }\r\n        this._dragging = false;\r\n        this._drag_node = null;\r\n    };\r\n    GUI.prototype.mouseout = function (x, y) {\r\n        console.log('mouseout');\r\n        this._select_boxing.running = false;\r\n        close_selection_box();\r\n    };\r\n    GUI.prototype.mousemove = function (x, y) {\r\n        if (this._select_boxing.running) {\r\n            var bx = this._select_boxing.rect.x + this._pos_rect.x;\r\n            var by = this._select_boxing.rect.y + this._pos_rect.y;\r\n            var width = (x + this._pos_rect.x) - bx;\r\n            var height = (y + this._pos_rect.y) - by;\r\n            this._select_boxing.rect.w = width;\r\n            this._select_boxing.rect.h = height;\r\n            selection_box(bx, by, width, height);\r\n        }\r\n        if (this.locked()) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < this._events['mousemove'].length; ++i) {\r\n            this._events['mousemove'][i](x, y, -1, null);\r\n        }\r\n        if (!this._dragging) {\r\n            this.select_nodes_at_pos(x, y);\r\n            return;\r\n        }\r\n        if (this._drag_node != null && this._drag_node.draggable()) {\r\n            this._drag_node.set_pos(x, y, true);\r\n        }\r\n    };\r\n    GUI.prototype.get_shapes = function (type) {\r\n        var arr = [];\r\n        for (var i = 0; i < this._nodes.length; ++i) {\r\n            if (this._nodes[i].shape() == type) {\r\n                arr.push(this._nodes[i]);\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n    GUI.prototype.draw = function (layer, swap) {\r\n        if (layer === void 0) { layer = 'default'; }\r\n        if (swap === void 0) { swap = true; }\r\n        if (_draw_calls++ > 45) {\r\n            console.log('draw call');\r\n            for (var i = 0; i < this._nodes.length; ++i) {\r\n                var node = this._nodes[i];\r\n                var state = node.state();\r\n                if (state == guitypes_4.State.STATE_NO_CHANGE) {\r\n                    continue;\r\n                }\r\n                if (state == guitypes_4.State.STATE_CHANGE_TO_FRONT) {\r\n                    this._render_types.push_to_front(node);\r\n                    node.pop_state();\r\n                }\r\n                else if (state == guitypes_4.State.STATE_CHANGE_TO_BACK) {\r\n                    this._render_types.push_back(node);\r\n                    node.pop_state();\r\n                }\r\n                else if (state == guitypes_4.State.STATE_ICON_ADDED) {\r\n                    var rt_i = this._render_types.add_icon();\r\n                    rt_i.add_node(node);\r\n                    node.pop_state();\r\n                }\r\n                else {\r\n                    this.state_change_node(node);\r\n                }\r\n            }\r\n            _draw_calls = 0;\r\n        }\r\n        this._render_types.draw();\r\n        this._renderer.swap_buffer(this._rect);\r\n    };\r\n    GUI.prototype.print = function () {\r\n        this._render_types.print();\r\n    };\r\n    return GUI;\r\n}());\r\nexports.GUI = GUI;\r\n;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/gui.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Render_text = (function () {\r\n    function Render_text(text, font, color, size, x, y) {\r\n        this._text = text;\r\n        this._font_color = color;\r\n        this._font_size = size;\r\n        this._font = font;\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n    Render_text.prototype.x = function () { return this._x; };\r\n    Render_text.prototype.y = function () { return this._y; };\r\n    Render_text.prototype.text = function () { return this._text; };\r\n    Render_text.prototype.color = function () { return this._font_color; };\r\n    Render_text.prototype.size = function () { return this._font_size; };\r\n    Render_text.prototype.font = function () { return this._font; };\r\n    return Render_text;\r\n}());\r\nvar Render_screen = (function () {\r\n    function Render_screen(canvas_id, width, height) {\r\n        console.log('Constructor for Render_screen');\r\n        this._mainscreen = document.getElementById(canvas_id);\r\n        this._mainscreen_ctx = this._mainscreen.getContext(\"2d\");\r\n        this._offscreen = document.createElement(\"canvas\");\r\n        this._mainscreen.width = width;\r\n        this._mainscreen.height = height;\r\n        this._offscreen.width = this._mainscreen.width;\r\n        this._offscreen.height = this._mainscreen.height;\r\n        this._offscreen_ctx = this._offscreen.getContext(\"2d\");\r\n        this._default_font = 'Bitstream';\r\n        console.log('context sizes: ' + this._mainscreen.width + ' ' + this._mainscreen.height);\r\n        this._text_buffer = [];\r\n        this._shadow = false;\r\n        this._icons = [];\r\n        this._counter = 0;\r\n        this._track = { border_states: [], no_border_states: [] };\r\n    }\r\n    Render_screen.prototype.init_img_source = function (id) {\r\n        var img = document.getElementById(id);\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);\r\n        return canvas;\r\n    };\r\n    Render_screen.prototype.get_pixel_image = function (canvas, x, y) {\r\n        return canvas.getContext('2d').getImageData(x, y, 1, 1).data;\r\n    };\r\n    Render_screen.prototype.contrast = function (hexcolor) {\r\n        return (parseInt(hexcolor.substr(1), 16) > 0xffffff / 2) ? '#000000' : '#ffffff';\r\n    };\r\n    Render_screen.prototype.calc_shade_color = function (color, percent) {\r\n        var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\r\n        return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\r\n    };\r\n    Render_screen.prototype.add_icon = function (icon) {\r\n        this._icons.push(icon);\r\n    };\r\n    Render_screen.prototype.icon = function (name) {\r\n        for (var i = 0; i < this._icons.length; ++i) {\r\n            if (this._icons[i].name() == name) {\r\n                return this._icons[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Render_screen.prototype.resize = function (width, height) {\r\n        this._mainscreen.width = width;\r\n        this._mainscreen.height = height;\r\n        this._offscreen.width = width;\r\n        this._offscreen.height = height;\r\n        this._offscreen_ctx = this._offscreen.getContext(\"2d\");\r\n    };\r\n    Render_screen.prototype.print = function () {\r\n        console.log(\"Offscreen context : \" + this._offscreen.width + \", \" + this._offscreen.height);\r\n    };\r\n    Render_screen.prototype.toggle_shadow = function (shadow) {\r\n        this._shadow = shadow;\r\n    };\r\n    Render_screen.prototype.shadow = function () {\r\n        return this._shadow;\r\n    };\r\n    Render_screen.prototype.clear = function (rect) {\r\n        this._mainscreen_ctx.clearRect(rect.x, rect.y, rect.w, rect.h);\r\n        this._offscreen_ctx.clearRect(rect.x, rect.y, rect.w, rect.h);\r\n    };\r\n    Render_screen.prototype.pre_draw = function () {\r\n        this._offscreen_ctx.translate(0.5, 0.5);\r\n    };\r\n    Render_screen.prototype.post_draw = function () {\r\n        this._offscreen_ctx.translate(-0.5, -0.5);\r\n    };\r\n    Render_screen.prototype.swap_buffer = function (rect) {\r\n        this._mainscreen_ctx.clearRect(rect.x, rect.y, rect.w, rect.h);\r\n        this._mainscreen_ctx.drawImage(this._offscreen, rect.x, rect.y, rect.w, rect.h, rect.x, rect.y, rect.w, rect.h);\r\n        this._offscreen_ctx.clearRect(rect.x, rect.y, rect.w, rect.h);\r\n    };\r\n    Render_screen.prototype.set_font = function (size, name) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.font = size + \"px \" + name;\r\n    };\r\n    Render_screen.prototype.draw_shadow = function (ctx) {\r\n        if (!this._shadow) {\r\n            return;\r\n        }\r\n        ctx.shadowBlur = 10;\r\n        ctx.shadowOffsetX = 5;\r\n        ctx.shadowOffsetY = 5;\r\n        ctx.shadowColor = '#000000';\r\n    };\r\n    Render_screen.prototype.draw_icon_assoc = function (color, gui_nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        for (var k in gui_nodes) {\r\n            var tb = gui_nodes[k];\r\n            var tr = tb.icon_rect();\r\n            if (tr == null) {\r\n                continue;\r\n            }\r\n            var ir = tb.icon().rect();\r\n            ctx.drawImage(tb.icon().img(), ir.x, ir.y, ir.w, ir.h, tr.x, tr.y, tr.w, tr.h);\r\n        }\r\n    };\r\n    Render_screen.prototype.draw_text_assoc = function (color, gui_nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        for (var k in gui_nodes) {\r\n            var tb = gui_nodes[k];\r\n            var tr = tb.text_rect();\r\n            if (tr == null) {\r\n                continue;\r\n            }\r\n            ctx.fillStyle = color;\r\n            ctx.fillText(tb.caption(), tr.x, tr.y);\r\n        }\r\n    };\r\n    Render_screen.prototype.draw_borders_assoc = function (color, thickness, nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        var r = null;\r\n        var len = nodes.length;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = thickness;\r\n        ctx.strokeStyle = color;\r\n        for (var k in nodes) {\r\n            r = nodes[k].topleft_rect();\r\n            ctx.moveTo(r.x, r.y);\r\n            ctx.lineTo(r.x + r.w, r.y);\r\n            ctx.lineTo(r.x + r.w, r.y + r.h);\r\n            ctx.lineTo(r.x, r.y + r.h);\r\n            ctx.lineTo(r.x, r.y);\r\n        }\r\n        ctx.stroke();\r\n    };\r\n    Render_screen.prototype.draw_no_border_box_assoc = function (color, nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        var r = null;\r\n        ctx.fillStyle = color;\r\n        for (var k in nodes) {\r\n            r = nodes[k].topleft_rect();\r\n            ctx.fillRect(r.x, r.y, r.w, r.h);\r\n        }\r\n    };\r\n    Render_screen.prototype.draw_no_border_poly_assoc = function (color, nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        var len = 0;\r\n        for (var k in nodes) {\r\n            var points = nodes[k].abs_points();\r\n            ctx.moveTo(points[0].x, points[0].y);\r\n            len = points.length;\r\n            for (var i = 1; i < len; ++i) {\r\n                ctx.lineTo(points[i].x, points[i].y);\r\n            }\r\n            ctx.lineTo(points[0].x, points[0].y);\r\n            ctx.fill();\r\n        }\r\n    };\r\n    Render_screen.prototype.draw_borders_poly_assoc = function (color, thickness, nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        var r = null;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = thickness;\r\n        ctx.strokeStyle = color;\r\n        var len = 0;\r\n        for (var k in nodes) {\r\n            var points = nodes[k].abs_points();\r\n            ctx.moveTo(points[0].x, points[0].y);\r\n            len = points.length;\r\n            for (var i = 1; i < len; ++i) {\r\n                ctx.lineTo(points[i].x, points[i].y);\r\n            }\r\n            ctx.lineTo(points[0].x, points[0].y);\r\n        }\r\n        ctx.stroke();\r\n    };\r\n    Render_screen.prototype.draw_borders_array = function (color, thickness, nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        var r = null;\r\n        var len = nodes.length;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = thickness;\r\n        ctx.strokeStyle = color;\r\n        for (var i = 0; i < len; ++i) {\r\n            r = nodes[i].topleft_rect();\r\n            ctx.moveTo(r.x, r.y);\r\n            ctx.lineTo(r.x + r.w, r.y);\r\n            ctx.lineTo(r.x + r.w, r.y + r.h);\r\n            ctx.lineTo(r.x, r.y + r.h);\r\n            ctx.lineTo(r.x, r.y);\r\n        }\r\n        ctx.stroke();\r\n    };\r\n    Render_screen.prototype.draw_no_border_box_array = function (color, nodes) {\r\n        var ctx = this._offscreen_ctx;\r\n        var r = null;\r\n        var len = nodes.length;\r\n        ctx.fillStyle = color;\r\n        for (var i = 0; i < len; ++i) {\r\n            r = nodes[i].topleft_rect();\r\n            ctx.fillRect(r.x, r.y, r.w, r.h);\r\n        }\r\n    };\r\n    Render_screen.prototype.draw_box = function (left, top, w, h, bg_color, stroke_color, stroke_thickness) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.beginPath();\r\n        ctx.rect(left, top, w, h);\r\n        ctx.fillStyle = bg_color;\r\n        ctx.fill();\r\n        ctx.lineWidth = stroke_thickness;\r\n        ctx.strokeStyle = stroke_color;\r\n        ctx.stroke();\r\n    };\r\n    Render_screen.prototype.draw_image_blend_color = function (left, top, x, y, val, icon) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.drawImage(icon.img(), left, top);\r\n    };\r\n    Render_screen.prototype.draw_icon = function (left, top, width, height, icon) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.drawImage(icon.img(), left, top, width, height);\r\n    };\r\n    Render_screen.prototype.draw_image_ctx = function (image_canvas, img_rect, target_rect) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.drawImage(image_canvas, img_rect.x, img_rect.y, img_rect.w, img_rect.h, target_rect.x, target_rect.y, target_rect.w, target_rect.h);\r\n    };\r\n    Render_screen.prototype.draw_text_buffer = function () {\r\n        var ctx = this._offscreen_ctx;\r\n        for (var i = 0; i < this._text_buffer.length; ++i) {\r\n            var tb = this._text_buffer[i];\r\n            ctx.font = tb.size() + \"px \" + tb.font();\r\n            ctx.fillStyle = tb.color();\r\n            ctx.fillText(tb.text(), tb.x(), tb.y());\r\n        }\r\n        this._text_buffer = [];\r\n    };\r\n    Render_screen.prototype.draw_text_color = function (x, y, font, size, color, str) {\r\n        var txt = new Render_text(str, font, color, size, x, y);\r\n        this._text_buffer.push(txt);\r\n    };\r\n    Render_screen.prototype.draw_text = function (x, y, size, str) {\r\n        var txt = new Render_text(str, this._default_font, '#ffffff', size, x, y);\r\n        this._text_buffer.push(txt);\r\n    };\r\n    Render_screen.prototype.draw_line = function (x0, y0, x1, y1, thickness, color) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.lineWidth = thickness;\r\n        ctx.strokeStyle = color;\r\n        ctx.stroke();\r\n    };\r\n    Render_screen.prototype.draw_circle = function (x, y, radius, stroke_width, inner_color, stroke_color) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = inner_color;\r\n        ctx.fill();\r\n        ctx.lineWidth = stroke_width;\r\n        ctx.strokeStyle = stroke_color;\r\n        ctx.stroke();\r\n    };\r\n    Render_screen.prototype.draw_circle_caption = function (x, y, radius, stroke_width, inner_color, stroke_color, text, font, font_size) {\r\n        if (font_size === void 0) { font_size = 16; }\r\n        var ctx = this._offscreen_ctx;\r\n        this.draw_circle(x, y, radius, stroke_width, inner_color, stroke_color);\r\n        ctx.font = font_size + \"px \" + font;\r\n        var w = ctx.measureText(text).width / 2;\r\n        this.draw_text_color(x - w, y, this._default_font, font_size, 'white', text);\r\n    };\r\n    Render_screen.prototype.calc_text_width = function (text) {\r\n        var ctx = this._offscreen_ctx;\r\n        return ctx.measureText(text).width;\r\n    };\r\n    Render_screen.prototype.draw_fill_points = function (points, stroke_width, inner_color, stroke_color) {\r\n        if (points.length < 3) {\r\n            return false;\r\n        }\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.beginPath();\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        for (var i = 1; i < points.length; ++i) {\r\n            ctx.lineTo(points[i].x, points[i].y);\r\n        }\r\n        ctx.lineTo(points[0].x, points[0].y);\r\n        ctx.fillStyle = inner_color;\r\n        ctx.fill();\r\n        ctx.lineWidth = stroke_width;\r\n        ctx.strokeStyle = stroke_color;\r\n        ctx.stroke();\r\n        return true;\r\n    };\r\n    Render_screen.prototype.draw_fill_path = function (p0, p1, p2, stroke_width, inner_color, stroke_color) {\r\n        var ctx = this._offscreen_ctx;\r\n        ctx.beginPath();\r\n        ctx.moveTo(p0[0], p0[1]);\r\n        ctx.lineTo(p1[0], p1[1]);\r\n        ctx.lineTo(p2[0], p2[1]);\r\n        ctx.fillStyle = inner_color;\r\n        ctx.fill();\r\n        ctx.lineWidth = stroke_width;\r\n        ctx.strokeStyle = stroke_color;\r\n        ctx.stroke();\r\n    };\r\n    Render_screen.prototype.draw_triangle = function (x, y, height, stroke_width, inner_color, stroke_color) {\r\n        var ctx = this._offscreen_ctx;\r\n        var h = height / 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x - h, y + h);\r\n        ctx.lineTo(x + h, y + h);\r\n        ctx.lineTo(x, y - h);\r\n        ctx.fillStyle = inner_color;\r\n        ctx.fill();\r\n        ctx.lineWidth = stroke_width;\r\n        ctx.strokeStyle = stroke_color;\r\n        ctx.stroke();\r\n    };\r\n    return Render_screen;\r\n}());\r\nexports.Render_screen = Render_screen;\r\n;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/render.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GUI_line_2_node = (function () {\r\n    function GUI_line_2_node(renderobj) {\r\n        this._renderer = renderobj;\r\n        this._nodes = [];\r\n        this._num_nodes = 0;\r\n        this._thickness = 0.5;\r\n        this._line_color = '#222222';\r\n        this._stroke_color = null;\r\n    }\r\n    GUI_line_2_node.prototype.add_node = function (node) {\r\n        this._nodes[this._num_nodes++] = node;\r\n    };\r\n    GUI_line_2_node.prototype.set_line_color = function (color) {\r\n        this._line_color = color;\r\n    };\r\n    GUI_line_2_node.prototype.set_stroke_color = function (color) {\r\n        this._stroke_color;\r\n    };\r\n    GUI_line_2_node.prototype.set_thickness = function (pixels) {\r\n        this._thickness = pixels;\r\n    };\r\n    GUI_line_2_node.prototype.draw = function () {\r\n        if (this._num_nodes < 2) {\r\n            return;\r\n        }\r\n        var fx = this._nodes[0].x();\r\n        var fy = this._nodes[0].y();\r\n        var tx = this._nodes[1].x();\r\n        var ty = this._nodes[1].y();\r\n        if (this._nodes[0].shape() == 'square') {\r\n            fx += this._nodes[0].width() / 2;\r\n            fy += this._nodes[0].height() / 2;\r\n        }\r\n        if (this._nodes[1].shape() == 'square') {\r\n            tx += this._nodes[1].width() / 2;\r\n            ty += this._nodes[1].height() / 2;\r\n        }\r\n        this._renderer.draw_line(fx, fy, tx, ty, this._thickness, this._line_color);\r\n    };\r\n    return GUI_line_2_node;\r\n}());\r\nexports.GUI_line_2_node = GUI_line_2_node;\r\n;\r\nvar _drawcalls = 0;\r\nvar guimath_1 = require(\"./guimath\");\r\nvar guitypes_1 = require(\"./guitypes\");\r\nvar guitypes_2 = require(\"./guitypes\");\r\nvar guitypes_3 = require(\"./guitypes\");\r\nvar GUI_node = (function () {\r\n    function GUI_node(renderobj, id, ap, shape) {\r\n        this._radius = 8;\r\n        this._id = id;\r\n        this._center_rect = { x: 0, y: 0, w: 16, h: 16 };\r\n        this._topleft_rect = { x: 0, y: 0, w: 16, h: 16 };\r\n        this._renderer = renderobj;\r\n        this._selected = false;\r\n        this._icon = null;\r\n        this._border_color = '#dedede';\r\n        this._border_thickness = 1;\r\n        this._background_color = '#000000';\r\n        this._icon_color = '#000000';\r\n        this._caption_color = '#ffffff';\r\n        this._shape = shape;\r\n        this._caption = '';\r\n        this._text_autohide = false;\r\n        this._got_focus = false;\r\n        this._draggable = false;\r\n        this._icon_scale = 1.0;\r\n        this._font_size = 14;\r\n        this._font = 'Bitstream2';\r\n        this._icon_x_offset = 0;\r\n        this._icon_y_offset = 0;\r\n        this._hit_test = true;\r\n        this._on_click = null;\r\n        this._mx = 0;\r\n        this._my = 0;\r\n        this._indicator_color = null;\r\n        this._highlighted = false;\r\n        this._highlightable = true;\r\n        this._static_color = false;\r\n        this._shaded_color = null;\r\n        this._id = id;\r\n        this._quad_ids = [];\r\n        this._highlight_color = '#44aa44';\r\n        this._points = [];\r\n        this._abs_points = [];\r\n        this._prev_points = [];\r\n        this._anchor_point = ap;\r\n        this._visible = true;\r\n        this._prev_state = { x: 0, y: 0, w: 16, h: 16 };\r\n        this._br = { x: 0, y: 0, w: 0, h: 0 };\r\n        this._state_changes = [];\r\n        this._icon_style = -1;\r\n        this._zoom_thresholds = [];\r\n        this._zoom_thresholds.push(-1);\r\n        this._zoom_thresholds.push(-1);\r\n    }\r\n    GUI_node.prototype.set_visible = function (visible) {\r\n        this._visible = visible;\r\n    };\r\n    GUI_node.prototype.visible = function () {\r\n        return this._visible;\r\n    };\r\n    GUI_node.prototype.anchor_point = function () { return this._anchor_point; };\r\n    GUI_node.prototype.set_anchor_point = function (ap) {\r\n        this._anchor_point = ap;\r\n    };\r\n    GUI_node.prototype.set_quad_ids = function (ids) {\r\n        this._quad_ids = ids;\r\n    };\r\n    GUI_node.prototype.set_prev_state = function (x, y, w, h) {\r\n        this._prev_state.x = x;\r\n        this._prev_state.y = y;\r\n        this._prev_state.w = w;\r\n        this._prev_state.h = h;\r\n    };\r\n    GUI_node.prototype.zoom_thresholds = function () {\r\n        return this._zoom_thresholds;\r\n    };\r\n    GUI_node.prototype.set_min_zoom = function (factor) {\r\n        this._zoom_thresholds[0] = factor;\r\n    };\r\n    GUI_node.prototype.set_max_zoom = function (factor) {\r\n        this._zoom_thresholds[1] = factor;\r\n    };\r\n    GUI_node.prototype.set_prev_point_state = function (points) {\r\n        this._prev_points = JSON.parse(JSON.stringify(points));\r\n    };\r\n    GUI_node.prototype.prev_point_state = function () { return this._prev_points; };\r\n    GUI_node.prototype.prev_state = function () { return this._prev_state; };\r\n    GUI_node.prototype.recalculate = function () {\r\n        if (this._shape == 'polygon') {\r\n            this.create_abs_points();\r\n        }\r\n    };\r\n    GUI_node.prototype.abs_points = function () {\r\n        return JSON.parse(JSON.stringify(this._abs_points));\r\n    };\r\n    GUI_node.prototype.br = function () {\r\n        return this._br;\r\n    };\r\n    GUI_node.prototype.set_br = function (br) {\r\n        this._br = br;\r\n    };\r\n    GUI_node.prototype.quad_ids = function () { return this._quad_ids; };\r\n    GUI_node.prototype.set_rect = function (rect) {\r\n        if (this._anchor_point == guitypes_1.Anchor.ANCHOR_CENTER) {\r\n            this._center_rect = rect;\r\n            this._topleft_rect = guimath_1.FDGMath.rect_center_to_topleft(this._center_rect);\r\n        }\r\n        else {\r\n            this._topleft_rect = rect;\r\n            this._center_rect = guimath_1.FDGMath.rect_topleft_to_center(this._topleft_rect);\r\n        }\r\n    };\r\n    GUI_node.prototype.rect = function () {\r\n        return this.internal_get_rect();\r\n    };\r\n    GUI_node.prototype.rect_with_border = function () {\r\n        var r = this.internal_get_rect();\r\n        return { x: r.x - this._border_thickness, y: r.y - this._border_thickness, w: r.w + this._border_thickness, h: r.h + this._border_thickness };\r\n    };\r\n    GUI_node.prototype.ap_border_rect = function (ap) {\r\n        var r = null;\r\n        if (ap == guitypes_1.Anchor.ANCHOR_CENTER) {\r\n            r = this._center_rect;\r\n        }\r\n        else {\r\n            r = this._topleft_rect;\r\n        }\r\n        return { x: r.x - this._border_thickness, y: r.y - this._border_thickness, w: r.w + this._border_thickness * 2, h: r.h + this._border_thickness * 2 };\r\n    };\r\n    GUI_node.prototype.id = function () { return this._id; };\r\n    GUI_node.prototype.set_static_color = function (st) { this._static_color = st; };\r\n    GUI_node.prototype.static_color = function () { return this._static_color; };\r\n    GUI_node.prototype.print = function () {\r\n        console.log('GUI_node: ' + this._caption);\r\n        console.log('        : center rect: ' + JSON.stringify(this._center_rect));\r\n        console.log('        : ap_border_rect (center): ' + JSON.stringify(this.ap_border_rect(guitypes_1.Anchor.ANCHOR_CENTER)));\r\n        console.log('        : topleft rect: ' + JSON.stringify(this._topleft_rect));\r\n        console.log('        : ap_border_rect (top left): ' + JSON.stringify(this.ap_border_rect(guitypes_1.Anchor.ANCHOR_TOPLEFT)));\r\n        console.log('        : contained in : ' + JSON.stringify(this._quad_ids));\r\n        console.log('        : helper rect : ' + JSON.stringify(this._prev_state));\r\n        if (this._shape == 'polygon') {\r\n            console.log('        : BR : ' + JSON.stringify(this._br));\r\n        }\r\n    };\r\n    GUI_node.prototype.font = function () { return this._font; };\r\n    GUI_node.prototype.font_size = function () { return this._font_size; };\r\n    GUI_node.prototype.icon_offset = function () { return { x: this._icon_x_offset, y: this._icon_y_offset }; };\r\n    GUI_node.prototype.internal_get_rect = function () {\r\n        return this._anchor_point == guitypes_1.Anchor.ANCHOR_CENTER ? this._center_rect : this._topleft_rect;\r\n    };\r\n    GUI_node.prototype.topleft_rect = function () { return this._topleft_rect; };\r\n    GUI_node.prototype.center_rect = function () { return this._center_rect; };\r\n    GUI_node.prototype.x = function () { return this.internal_get_rect().x; };\r\n    GUI_node.prototype.y = function () { return this.internal_get_rect().y; };\r\n    GUI_node.prototype.pos = function () { return { x: this.x(), y: this.y() }; };\r\n    GUI_node.prototype.autohidden_caption = function () { return this._text_autohide; };\r\n    GUI_node.prototype.selected = function () { return this._selected; };\r\n    GUI_node.prototype.caption_color = function () { return this._caption_color; };\r\n    GUI_node.prototype.caption = function () { return this._caption; };\r\n    GUI_node.prototype.width = function () { return this.internal_get_rect().w; };\r\n    GUI_node.prototype.height = function () { return this.internal_get_rect().h; };\r\n    GUI_node.prototype.radius = function () { return this._radius; };\r\n    GUI_node.prototype.icon = function () { return this._icon; };\r\n    GUI_node.prototype.is_box = function () { return false; };\r\n    GUI_node.prototype.has_hit_test = function () { return this._hit_test; };\r\n    GUI_node.prototype.shape = function () { return this._shape; };\r\n    GUI_node.prototype.draggable = function () { return this._draggable; };\r\n    GUI_node.prototype.set_mousepos = function (x, y) { this._mx = x; this._my = y; };\r\n    GUI_node.prototype.indicator_color = function () { return this._indicator_color; };\r\n    GUI_node.prototype.set_font = function (font) {\r\n        this._font = font;\r\n    };\r\n    GUI_node.prototype.on_click = function (func) {\r\n        this._on_click = func;\r\n    };\r\n    GUI_node.prototype.fetch_gui_children = function (container) {\r\n    };\r\n    GUI_node.prototype.set_indicator_color = function (color) {\r\n        this._indicator_color = color;\r\n    };\r\n    GUI_node.prototype.set_draggable = function (draggable) {\r\n        this._draggable = draggable;\r\n    };\r\n    GUI_node.prototype.set_hit_test = function (test) {\r\n        this._hit_test = test;\r\n    };\r\n    GUI_node.prototype.set_points = function (points) {\r\n        this._points = points;\r\n        this.create_abs_points();\r\n    };\r\n    GUI_node.prototype.points = function () { return this._points; };\r\n    GUI_node.prototype.create_abs_points = function () {\r\n        var r = this._center_rect;\r\n        this._abs_points = [];\r\n        for (var i = 0; i < this._points.length; ++i) {\r\n            this._abs_points.push({ x: r.x + this._points[i].x, y: r.y + this._points[i].y });\r\n        }\r\n        this.set_br(guimath_1.FDGMath.calc_br(this._abs_points));\r\n    };\r\n    GUI_node.prototype.set_icon_offset = function (x, y) {\r\n        this._icon_x_offset = x;\r\n        this._icon_y_offset = y;\r\n    };\r\n    GUI_node.prototype.set_font_size = function (size) {\r\n        this._font_size = size;\r\n    };\r\n    GUI_node.prototype.set_caption_color = function (color) {\r\n        this._caption_color = color;\r\n    };\r\n    GUI_node.prototype.set_autohidden_caption = function (hidden) {\r\n        this._text_autohide = hidden;\r\n    };\r\n    GUI_node.prototype.set_icon_scale = function (scale) {\r\n        this._icon_scale = scale;\r\n    };\r\n    GUI_node.prototype.set_icon = function (icon, style) {\r\n        this._icon_style = style;\r\n        this._icon = icon;\r\n        this.calc_icon_rect();\r\n        this._state_changes.push(guitypes_2.State.STATE_ICON_ADDED);\r\n    };\r\n    GUI_node.prototype.icon_rect = function () {\r\n        return this._icon_rect;\r\n    };\r\n    GUI_node.prototype.calc_icon_rect = function () {\r\n        var r = this._topleft_rect;\r\n        if (this._icon_style == guitypes_3.IconStyle.ICON_STYLE_NORMAL) {\r\n            this._icon_rect = { x: r.x, y: r.y, w: this._icon.rect().w, h: this._icon.rect().h };\r\n            return;\r\n        }\r\n        this._icon_rect = r;\r\n    };\r\n    GUI_node.prototype.set_icon_color = function (color) {\r\n        this._icon_color = color;\r\n    };\r\n    GUI_node.prototype.set_background_color = function (color) {\r\n        this._background_color = color;\r\n        this._shaded_color = color;\r\n    };\r\n    GUI_node.prototype.background_color = function () {\r\n        return this._background_color;\r\n    };\r\n    GUI_node.prototype.set_border_color = function (color) {\r\n        this._border_color = color;\r\n        this._state_changes.push(guitypes_2.State.STATE_COLOR_CHANGE);\r\n    };\r\n    GUI_node.prototype.set_border_thickness = function (thickness) {\r\n        this._border_thickness = thickness;\r\n    };\r\n    GUI_node.prototype.set_pos = function (x, y, recalculate) {\r\n        if (recalculate === void 0) { recalculate = false; }\r\n        var r = this.internal_get_rect();\r\n        r.x = x;\r\n        r.y = y;\r\n        this.set_rect(r);\r\n        if (recalculate) {\r\n            this.recalculate();\r\n        }\r\n    };\r\n    GUI_node.prototype.state = function () {\r\n        if (this._state_changes.length <= 0) {\r\n            return guitypes_2.State.STATE_NO_CHANGE;\r\n        }\r\n        return this._state_changes[0];\r\n    };\r\n    GUI_node.prototype.bring_to_back = function () {\r\n        this._state_changes.push(guitypes_2.State.STATE_CHANGE_TO_BACK);\r\n    };\r\n    GUI_node.prototype.bring_to_front = function () {\r\n        this._state_changes.push(guitypes_2.State.STATE_CHANGE_TO_FRONT);\r\n    };\r\n    GUI_node.prototype.pop_state = function () {\r\n        this._state_changes.splice(0, 1);\r\n    };\r\n    GUI_node.prototype.clear_states = function () {\r\n        this._state_changes = [];\r\n    };\r\n    GUI_node.prototype.set_radius = function (radius) {\r\n        var r = this.internal_get_rect();\r\n        r.w = radius * 2.0;\r\n        r.h = radius * 2.0;\r\n        this._radius = radius;\r\n        this.set_rect(r);\r\n    };\r\n    GUI_node.prototype.set_height = function (height) {\r\n        var r = this.internal_get_rect();\r\n        r.h = height;\r\n        this.set_rect(r);\r\n    };\r\n    GUI_node.prototype.set_width = function (width) {\r\n        var r = this.internal_get_rect();\r\n        r.w = width;\r\n        this.set_rect(r);\r\n    };\r\n    GUI_node.prototype.set_caption = function (text) {\r\n        this._caption = text;\r\n    };\r\n    GUI_node.prototype.calculate_width_from_caption = function (margin) {\r\n        var r = this.internal_get_rect();\r\n        r.w = this._renderer.calc_text_width(this._caption) + margin * 2;\r\n        this.set_rect(r);\r\n    };\r\n    GUI_node.prototype.calc_nodes_pos = function () { };\r\n    GUI_node.prototype.set_selected = function (selected) {\r\n        this._selected = selected;\r\n        this._shaded_color = this.shaded_color();\r\n    };\r\n    GUI_node.prototype.shaded_color = function () {\r\n        if (this._selected) {\r\n            return this._renderer.calc_shade_color(this._background_color, 0.5);\r\n        }\r\n        return this._background_color;\r\n    };\r\n    GUI_node.prototype.text_rect = function () {\r\n        if (this._selected && this._text_autohide) {\r\n            return { x: this._mx, y: this._my, w: 0, h: 0 };\r\n        }\r\n        else if (!this._text_autohide) {\r\n            var r = this.internal_get_rect();\r\n            var w = this._renderer.calc_text_width(this._caption);\r\n            return { x: r.x - w / 2, y: r.y, w: 0, h: 0 };\r\n        }\r\n        return null;\r\n    };\r\n    GUI_node.prototype.set_highlightable = function (highlightable) {\r\n        this._highlightable = highlightable;\r\n    };\r\n    GUI_node.prototype.highlightable = function () {\r\n        return this._highlightable;\r\n    };\r\n    GUI_node.prototype.set_highlighted = function (highlighted) {\r\n        if (!this._highlightable) {\r\n            return;\r\n        }\r\n        this._highlighted = highlighted;\r\n    };\r\n    GUI_node.prototype.highlighted = function () {\r\n        return this._highlighted;\r\n    };\r\n    GUI_node.prototype.draw = function (empty) { };\r\n    GUI_node.prototype.hit_test = function (x, y) {\r\n        if (!this._hit_test) {\r\n            return null;\r\n        }\r\n        var calc_rect = null;\r\n        var test = false;\r\n        if (this._shape == 'circle') {\r\n            calc_rect = this._center_rect;\r\n            test = (x - calc_rect.x) * (x - calc_rect.x) + (y - calc_rect.y) * (y - calc_rect.y) < this._radius * this._radius;\r\n        }\r\n        else if (this._shape == 'polygon') {\r\n            test = guimath_1.FDGMath.p_poly(this._abs_points, x, y);\r\n        }\r\n        else if (this._shape == 'square') {\r\n            calc_rect = this._topleft_rect;\r\n            if (calc_rect.x > x) {\r\n                test = false;\r\n            }\r\n            else if (calc_rect.x + calc_rect.w < x) {\r\n                test = false;\r\n            }\r\n            else if (calc_rect.y + calc_rect.h < y) {\r\n                test = false;\r\n            }\r\n            else if (calc_rect.y > y) {\r\n                test = false;\r\n            }\r\n            else {\r\n                test = true;\r\n            }\r\n        }\r\n        else if (this._shape == 'triangle') {\r\n            calc_rect = this._topleft_rect;\r\n            test = guimath_1.FDGMath.point_in_triangle(x, y, calc_rect.x - calc_rect.w / 2, calc_rect.y + calc_rect.h / 2, calc_rect.x + calc_rect.w / 2, calc_rect.y + calc_rect.h / 2, calc_rect.x, calc_rect.y - calc_rect.h / 2);\r\n        }\r\n        if (test) {\r\n            return this;\r\n        }\r\n        return null;\r\n    };\r\n    return GUI_node;\r\n}());\r\nexports.GUI_node = GUI_node;\r\n;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/guinode.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar guimath_1 = require(\"./guimath\");\r\nvar guitypes_1 = require(\"./guitypes\");\r\nvar guitypes_2 = require(\"./guitypes\");\r\nvar GUI_quad = (function () {\r\n    function GUI_quad(renderer, rect, id) {\r\n        this._renderer = renderer;\r\n        this._changed = true;\r\n        this._rect = rect;\r\n        this._img_rect = { x: 0, y: 0, w: 0, h: 0 };\r\n        this._pp_rect = { x: this._rect.x - 0.5, y: this._rect.y - 0.5, w: this._rect.w + 0.5, h: this._rect.w + 0.5 };\r\n        this._layers = {};\r\n        this._bg_color = '#000000';\r\n        this._id = id;\r\n        this._bg_image = null;\r\n    }\r\n    GUI_quad.prototype.id = function () {\r\n        return this._id;\r\n    };\r\n    GUI_quad.prototype.rect = function () {\r\n        return this._rect;\r\n    };\r\n    GUI_quad.prototype.is_changed = function () {\r\n        return this._changed;\r\n    };\r\n    GUI_quad.prototype.get_node_with_id = function (id, layer) {\r\n        if (layer === void 0) { layer = 'default'; }\r\n        if (!this._layers.hasOwnProperty(layer)) {\r\n            return null;\r\n        }\r\n        if (id in this._layers[layer]) {\r\n            return this._layers[layer][id];\r\n        }\r\n        return null;\r\n    };\r\n    GUI_quad.prototype.calc_node_inside = function (gui_node) {\r\n        var bordered_rect = null;\r\n        if (gui_node.shape() == 'polygon') {\r\n            bordered_rect = gui_node.br();\r\n        }\r\n        else {\r\n            bordered_rect = gui_node.ap_border_rect(guitypes_1.Anchor.ANCHOR_TOPLEFT);\r\n        }\r\n        if (guimath_1.FDGMath.a_rect_contains_b(this._pp_rect, bordered_rect)) {\r\n            return guitypes_2.NodeOverlaps.NODE_FULLY_INSIDE;\r\n        }\r\n        if (guimath_1.FDGMath.a_rect_overlaps_b(this._pp_rect, bordered_rect)) {\r\n            return guitypes_2.NodeOverlaps.NODE_PARTIALLY_INSIDE;\r\n        }\r\n        return guitypes_2.NodeOverlaps.NODE_NOT_INSIDE;\r\n    };\r\n    GUI_quad.prototype.clear_nodes = function (layer) {\r\n        if (layer === void 0) { layer = 'default'; }\r\n        if (!this._layers.hasOwnProperty(layer)) {\r\n            this._layers[layer] = {};\r\n        }\r\n    };\r\n    GUI_quad.prototype.add_node = function (gui_node, layer) {\r\n        if (layer === void 0) { layer = 'default'; }\r\n        if (!this._layers.hasOwnProperty(layer)) {\r\n            this._layers[layer] = {};\r\n        }\r\n        this.set_changed(true);\r\n        this._layers[layer][gui_node.id()] = gui_node;\r\n    };\r\n    GUI_quad.prototype.nodes = function (layer) {\r\n        if (layer === void 0) { layer = 'default'; }\r\n        return this._layers[layer];\r\n    };\r\n    GUI_quad.prototype.set_changed = function (changed) {\r\n        this._changed = changed;\r\n    };\r\n    GUI_quad.prototype.set_bg_color = function (color) {\r\n        this._bg_color = color;\r\n    };\r\n    GUI_quad.prototype.get_nodes_at_pos = function (x, y, layer) {\r\n        if (layer === void 0) { layer = 'default'; }\r\n        var nodes = {};\r\n        for (var k in this._layers[layer]) {\r\n            var n = this._layers[layer][k].hit_test(x, y);\r\n            if (n != null) {\r\n                nodes[k] = n;\r\n            }\r\n        }\r\n        return nodes;\r\n    };\r\n    GUI_quad.prototype.set_bg_image = function (image, rect) {\r\n        this._bg_image = image;\r\n        this._img_rect = rect;\r\n    };\r\n    GUI_quad.prototype.draw = function (layer, swap, force_draw) {\r\n        if (layer === void 0) { layer = 'default'; }\r\n        if (swap === void 0) { swap = true; }\r\n        if (force_draw === void 0) { force_draw = false; }\r\n        if (!force_draw && !this.is_changed()) {\r\n            return force_draw;\r\n        }\r\n        this._renderer.pre_draw();\r\n        this.set_changed(false);\r\n        if (this._bg_image != null) {\r\n        }\r\n        else {\r\n            this._renderer.draw_box(this._rect.x, this._rect.y, this._rect.w, this._rect.h, this._bg_color, this._bg_color, 0);\r\n        }\r\n        for (var k in this._layers[layer]) {\r\n            this._layers[layer][k].draw(false);\r\n        }\r\n        this._renderer.post_draw();\r\n        this._renderer.swap_buffer(this._rect);\r\n        return force_draw;\r\n    };\r\n    GUI_quad.prototype.print = function () {\r\n        console.log('GUI_quad: ' + this.id());\r\n        console.log('        : pp rect: ' + JSON.stringify(this._pp_rect));\r\n    };\r\n    return GUI_quad;\r\n}());\r\nexports.GUI_quad = GUI_quad;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/guiquad.ts\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GUI_atlas = (function () {\r\n    function GUI_atlas(image, name) {\r\n        this._image = image;\r\n        this._name = name;\r\n        this._icons = {};\r\n    }\r\n    GUI_atlas.prototype.atlas_to_color = function (color, name) {\r\n        var canvas = document.createElement('canvas');\r\n        var context = canvas.getContext('2d');\r\n        context.drawImage(this._image, 0, 0);\r\n        var target_canvas = document.createElement('canvas');\r\n        var target_ctx = target_canvas.getContext('2d');\r\n        var id = target_ctx.createImageData(1, 1);\r\n        target_ctx.beginPath();\r\n        target_ctx.rect(0, 0, this._image.width, this._image.height);\r\n        target_ctx.fillStyle = \"black\";\r\n        target_ctx.fill();\r\n        target_ctx.fillStyle = color;\r\n        for (var y = 0; y < this._image.height; ++y) {\r\n            for (var x = 0; x < this._image.width; ++x) {\r\n                var px = context.getImageData(x, y, 1, 1).data;\r\n                if (px[0] > 200) {\r\n                    target_ctx.fillRect(x, y, 1, 1);\r\n                }\r\n            }\r\n        }\r\n        var atlas = new GUI_atlas(target_canvas, name);\r\n        return atlas;\r\n    };\r\n    GUI_atlas.prototype.define_icon = function (name, rect) {\r\n        this._icons[name] = { rect: rect, image: this._image };\r\n    };\r\n    GUI_atlas.prototype.get = function (name) {\r\n        return this._icons[name];\r\n    };\r\n    return GUI_atlas;\r\n}());\r\nexports.GUI_atlas = GUI_atlas;\r\n;\r\nvar GUI_icon = (function () {\r\n    function GUI_icon(elem_id, name) {\r\n    }\r\n    GUI_icon.prototype.id = function () { return this._elem_id; };\r\n    GUI_icon.prototype.name = function () { return this._name; };\r\n    GUI_icon.prototype.img = function () { return this._img; };\r\n    GUI_icon.prototype.rect = function () { return this._rect; };\r\n    return GUI_icon;\r\n}());\r\nexports.GUI_icon = GUI_icon;\r\n;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/guiicon.ts\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _rt_ids = 0;\r\nvar guitypes_1 = require(\"./guitypes\");\r\nvar Render_type = (function () {\r\n    function Render_type(id, type, color, border_thickness, border_color) {\r\n        if (border_thickness === void 0) { border_thickness = 0; }\r\n        if (border_color === void 0) { border_color = '#000'; }\r\n        this._id = id;\r\n        this._type = type;\r\n        this._color = color;\r\n        this._border_thickness = border_thickness;\r\n        this._border_color = border_color;\r\n        this._nodes = {};\r\n    }\r\n    Render_type.prototype.id = function () { return this._id; };\r\n    Render_type.prototype.type = function () { return this._type; };\r\n    Render_type.prototype.color = function () { return this._color; };\r\n    Render_type.prototype.border_thickness = function () { return this._border_thickness; };\r\n    Render_type.prototype.border_color = function () { return this._border_color; };\r\n    Render_type.prototype.pop_node = function (gui_node) {\r\n        if (!(gui_node.id() in this._nodes)) {\r\n            return null;\r\n        }\r\n        var node = this._nodes[gui_node.id()];\r\n        delete this._nodes[gui_node.id()];\r\n        return node;\r\n    };\r\n    Render_type.prototype.add_node = function (gui_node) {\r\n        this._nodes[gui_node.id()] = gui_node;\r\n    };\r\n    Render_type.prototype.remove_node = function (gui_node) {\r\n        if (gui_node.id() in this._nodes) {\r\n            delete this._nodes[gui_node.id()];\r\n        }\r\n        else {\r\n        }\r\n    };\r\n    Render_type.prototype.draw = function (renderer) {\r\n        if (this._type == guitypes_1.RenderType.RT_SQUARE) {\r\n            renderer.draw_no_border_box_assoc(this._color, this._nodes);\r\n        }\r\n        else if (this._type == guitypes_1.RenderType.RT_BORDER_SQUARE) {\r\n            renderer.draw_borders_assoc(this._border_color, this._border_thickness, this._nodes);\r\n        }\r\n        else if (this._type == guitypes_1.RenderType.RT_POLYGON) {\r\n            renderer.draw_no_border_poly_assoc(this._color, this._nodes);\r\n        }\r\n        else if (this._type == guitypes_1.RenderType.RT_BORDER_POLY) {\r\n            renderer.draw_borders_poly_assoc(this._border_color, this._border_thickness, this._nodes);\r\n        }\r\n        else if (this._type == guitypes_1.RenderType.RT_TEXT) {\r\n            renderer.draw_text_assoc(this._color, this._nodes);\r\n        }\r\n        else if (this._type == guitypes_1.RenderType.RT_ICON) {\r\n            renderer.draw_icon_assoc(this._color, this._nodes);\r\n        }\r\n    };\r\n    Render_type.prototype.print = function () {\r\n        var info = [];\r\n        for (var k in this._nodes) {\r\n            var n = this._nodes[k];\r\n            info.push({ id: n.id(), t: n.shape() });\r\n        }\r\n        console.log(JSON.stringify(info));\r\n    };\r\n    return Render_type;\r\n}());\r\nexports.Render_type = Render_type;\r\nvar Render_type_handler = (function () {\r\n    function Render_type_handler(renderer) {\r\n        this._render_types = [];\r\n        for (var i = 0; i < 6; ++i) {\r\n            this._render_types[i] = {};\r\n        }\r\n        this._renderer = renderer;\r\n    }\r\n    Render_type_handler.prototype.add_icon = function () {\r\n        for (var k in this._render_types[5]) {\r\n            var rt = this._render_types[5][k];\r\n            if (rt.type() == guitypes_1.RenderType.RT_ICON) {\r\n                return rt;\r\n            }\r\n        }\r\n        var rt = new Render_type(_rt_ids++, guitypes_1.RenderType.RT_ICON, null, null, null);\r\n        this._render_types[5][rt.id()] = rt;\r\n        return rt;\r\n    };\r\n    Render_type_handler.prototype.add_square = function (background_color, z) {\r\n        if (z === void 0) { z = 0; }\r\n        for (var k in this._render_types[z + 0]) {\r\n            var rt = this._render_types[z + 0][k];\r\n            if (rt.type() == guitypes_1.RenderType.RT_SQUARE && rt.color() == background_color) {\r\n                return rt;\r\n            }\r\n        }\r\n        var rt = new Render_type(_rt_ids++, guitypes_1.RenderType.RT_SQUARE, background_color, null, null);\r\n        this._render_types[z + 0][rt.id()] = rt;\r\n        return rt;\r\n    };\r\n    Render_type_handler.prototype.add_polygon = function (background_color, z) {\r\n        if (z === void 0) { z = 0; }\r\n        for (var k in this._render_types[z + 0]) {\r\n            var rt = this._render_types[z + 0][k];\r\n            if (rt.type() == guitypes_1.RenderType.RT_POLYGON && rt.color() == background_color) {\r\n                return rt;\r\n            }\r\n        }\r\n        var rt = new Render_type(_rt_ids++, guitypes_1.RenderType.RT_POLYGON, background_color, null, null);\r\n        this._render_types[z + 0][rt.id()] = rt;\r\n        return rt;\r\n    };\r\n    Render_type_handler.prototype.add_border = function (border_thickness, border_color) {\r\n        for (var k in this._render_types[1]) {\r\n            var rt = this._render_types[1][k];\r\n            if (rt.type() == guitypes_1.RenderType.RT_BORDER_SQUARE && rt.border_thickness() == border_thickness && rt.border_color() == border_color) {\r\n                return rt;\r\n            }\r\n        }\r\n        var rt = new Render_type(_rt_ids++, guitypes_1.RenderType.RT_BORDER_SQUARE, null, border_thickness, border_color);\r\n        this._render_types[1][rt.id()] = rt;\r\n        return rt;\r\n    };\r\n    Render_type_handler.prototype.add_text = function (color) {\r\n        for (var k in this._render_types[4]) {\r\n            var rt = this._render_types[4][k];\r\n            if (rt.type() == guitypes_1.RenderType.RT_TEXT && rt.color() == color) {\r\n                return rt;\r\n            }\r\n        }\r\n        console.log('added text');\r\n        var rt = new Render_type(_rt_ids++, guitypes_1.RenderType.RT_TEXT, color);\r\n        this._render_types[4][rt.id()] = rt;\r\n        return rt;\r\n    };\r\n    Render_type_handler.prototype.add_border_poly = function (border_thickness, border_color) {\r\n        for (var k in this._render_types[1]) {\r\n            var rt = this._render_types[1][k];\r\n            if (rt.type() == guitypes_1.RenderType.RT_BORDER_POLY && rt.border_thickness() == border_thickness && rt.border_color() == border_color) {\r\n                return rt;\r\n            }\r\n        }\r\n        var rt = new Render_type(_rt_ids++, guitypes_1.RenderType.RT_BORDER_POLY, null, border_thickness, border_color);\r\n        this._render_types[1][rt.id()] = rt;\r\n        return rt;\r\n    };\r\n    Render_type_handler.prototype.remove_node = function (node, type) {\r\n        var layers = [];\r\n        if (type == guitypes_1.RenderType.RT_BORDER_POLY || type == guitypes_1.RenderType.RT_BORDER_SQUARE) {\r\n            layers.push(1, 3);\r\n            console.log('removing border');\r\n        }\r\n        else if (type == guitypes_1.RenderType.RT_SQUARE || type == guitypes_1.RenderType.RT_POLYGON) {\r\n            layers.push(0, 2);\r\n        }\r\n        else if (type == guitypes_1.RenderType.RT_TEXT) {\r\n            layers.push(4);\r\n        }\r\n        for (var l = 0; l < layers.length; ++l) {\r\n            for (var k in this._render_types[layers[l]]) {\r\n                this._render_types[layers[l]][k].remove_node(node);\r\n            }\r\n        }\r\n    };\r\n    Render_type_handler.prototype.push_back = function (gui_node) {\r\n        for (var i = 0; i < this._render_types.length; ++i) {\r\n            for (var k in this._render_types[i]) {\r\n                var n = this._render_types[i][k].pop_node(n);\r\n                if (n != null) {\r\n                    if (i == 0 || i == 1) {\r\n                        console.error('Node is already the furthest back possible');\r\n                    }\r\n                    else {\r\n                        this._render_types[i - 2][k].add_node(n);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Render_type_handler.prototype.push_to_front = function (gui_node) {\r\n        this.remove_node_from_all(gui_node);\r\n        if (gui_node.shape() == 'square') {\r\n            var rt = this.add_square(gui_node.background_color());\r\n            rt.add_node(gui_node);\r\n        }\r\n        else if (gui_node.shape() == 'polygon') {\r\n            var rt = this.add_polygon(gui_node.background_color());\r\n            rt.add_node(gui_node);\r\n        }\r\n    };\r\n    Render_type_handler.prototype.remove_node_from_all = function (node) {\r\n        for (var i = 0; i < this._render_types.length; ++i) {\r\n            for (var k in this._render_types[i]) {\r\n                this._render_types[i][k].remove_node(node);\r\n            }\r\n        }\r\n    };\r\n    Render_type_handler.prototype.get = function (id) {\r\n        if (id in this._render_types) {\r\n            return this._render_types[id];\r\n        }\r\n        return null;\r\n    };\r\n    Render_type_handler.prototype.draw = function () {\r\n        for (var i = 0; i < this._render_types.length; ++i) {\r\n            for (var k in this._render_types[i]) {\r\n                this._render_types[i][k].draw(this._renderer);\r\n            }\r\n        }\r\n    };\r\n    Render_type_handler.prototype.print = function () {\r\n        for (var i = 0; i < this._render_types.length; ++i) {\r\n            var rt = this._render_types[i];\r\n            for (var k in rt) {\r\n                console.log('RenderType index ' + i + ' with rt key k: ' + k);\r\n                rt[k].print();\r\n            }\r\n        }\r\n    };\r\n    return Render_type_handler;\r\n}());\r\nexports.Render_type_handler = Render_type_handler;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core_src/rendertype.ts\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}